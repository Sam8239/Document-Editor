import { TiptapCollabProvider } from "@hocuspocus/provider";
import CommentExtension from "@sereneinserenade/tiptap-comment-extension";
import { Editor } from "@tiptap/core";
import BubbleMenu from "@tiptap/extension-bubble-menu";
import CharacterCount from "@tiptap/extension-character-count";
import Collaboration from "@tiptap/extension-collaboration";
import CollaborationCursor from "@tiptap/extension-collaboration-cursor";
import Link from "@tiptap/extension-link";
import Placeholder from "@tiptap/extension-placeholder";
import TextAlign from "@tiptap/extension-text-align";
import Underline from "@tiptap/extension-underline";
import Youtube from "@tiptap/extension-youtube";
import StarterKit from "@tiptap/starter-kit";
import * as Y from "yjs";
import CustomMarkHighlight from "../extensions/CustomMarkHighlight";
import Image from "../extensions/Image";
import ImagePlaceholder from "../extensions/ImagePlaceholder";
import SlashCommand from "../extensions/SlashCommand";
import WordWrap from '../extensions/WordWrap';
import CustomHighlight from '../extensions/WordHighlight';
import { Howl } from 'howler';
import {
    getRandomElement,
    isValidUrl,
    typewriterEffect,
    uniqueString,
    validateHTML,
    validateJSON,
} from "../utils";

import "../assets/styles/app.css";
import { colors, randomNames } from "../constants";
import Animated from "../extensions/Animated";
import CustomText from "../extensions/CustomText";

/**
 * DocumentEditor class representing a document editor.
 */
export default class DocumentEditor {
    #editor; // Private field to hold the Tiptap Editor instance
    #documentElement; // Private field to hold the DOM element for the editor
    #headingLevels = [1, 2, 3];
    #editorOptions;
    #bubbleMenuElements = {}; // Private field to hold bubble menu elements
    #selectedText;
    #imageUploader;
    #selectionStart = 0;
    #selectionEnd = 0;
    #defaultMenuPos = "top";
    #currentMenuPos = this.#defaultMenuPos;
    #mainBubbleMenuTippyInstance = null;
    #linkBubbleMenuTippyInstance = null;
    #showLinkModal = false;
    #commentsContainerId;
    #extensions;
    #ID;
    #isTCollabActive = false;
    #zoomLevel = 1;
    #yDoc;
    #tiptapProvider = null;

    #defaultOptions = {
        placeholderText: "",
        initialContent: "",
        audioData: {
            audio_url:
                'https://x9fl-g20m-kela.n7c.xano.io/vault/3kjPoOL6/h5X-kq_C2RaZDjd2CzYFlPsc9Y8/RJlc1g../test.mp3',
            alignment: {
                characters: [
                    'W',
                    'h',
                    'a',
                    't',
                    ' ',
                    'i',
                    's',
                    ' ',
                    'a',
                    'n',
                    ' ',
                    'A',
                    'd',
                    'v',
                    'e',
                    'r',
                    't',
                    'o',
                    'r',
                    'i',
                    'a',
                    'l',
                    '?',
                    '\n',
                    '\n',
                    'A',
                    ' ',
                    'H',
                    'y',
                    'b',
                    'r',
                    'i',
                    'd',
                    ' ',
                    'o',
                    'f',
                    ' ',
                    'A',
                    'd',
                    'v',
                    'e',
                    'r',
                    't',
                    'i',
                    's',
                    'i',
                    'n',
                    'g',
                    ' ',
                    'a',
                    'n',
                    'd',
                    ' ',
                    'J',
                    'o',
                    'u',
                    'r',
                    'n',
                    'a',
                    'l',
                    'i',
                    's',
                    'm',
                    '\n',
                    '\n',
                    'I',
                    'n',
                    't',
                    'r',
                    'o',
                    'd',
                    'u',
                    'c',
                    't',
                    'i',
                    'o',
                    'n',
                    '\n',
                    '\n',
                    'A',
                    'n',
                    ' ',
                    'a',
                    'd',
                    'v',
                    'e',
                    'r',
                    't',
                    'o',
                    'r',
                    'i',
                    'a',
                    'l',
                    ' ',
                    'i',
                    's',
                    ' ',
                    'a',
                    ' ',
                    't',
                    'y',
                    'p',
                    'e',
                    ' ',
                    'o',
                    'f',
                    ' ',
                    'a',
                    'd',
                    'v',
                    'e',
                    'r',
                    't',
                    'i',
                    's',
                    'e',
                    'm',
                    'e',
                    'n',
                    't',
                    ' ',
                    't',
                    'h',
                    'a',
                    't',
                    ' ',
                    'm',
                    'i',
                    'm',
                    'i',
                    'c',
                    's',
                    ' ',
                    'e',
                    'd',
                    'i',
                    't',
                    'o',
                    'r',
                    'i',
                    'a',
                    'l',
                    ' ',
                    'c',
                    'o',
                    'n',
                    't',
                    'e',
                    'n',
                    't',
                    ',',
                    ' ',
                    's',
                    'u',
                    'c',
                    'h',
                    ' ',
                    'a',
                    's',
                    ' ',
                    'a',
                    ' ',
                    'n',
                    'e',
                    'w',
                    's',
                    ' ',
                    'a',
                    'r',
                    't',
                    'i',
                    'c',
                    'l',
                    'e',
                    ' ',
                    'o',
                    'r',
                    ' ',
                    'b',
                    'l',
                    'o',
                    'g',
                    ' ',
                    'p',
                    'o',
                    's',
                    't',
                    '.',
                    ' ',
                    'I',
                    't',
                    ' ',
                    'b',
                    'l',
                    'e',
                    'n',
                    'd',
                    's',
                    ' ',
                    'a',
                    'd',
                    'v',
                    'e',
                    'r',
                    't',
                    'i',
                    's',
                    'i',
                    'n',
                    'g',
                    ' ',
                    'w',
                    'i',
                    't',
                    'h',
                    ' ',
                    'j',
                    'o',
                    'u',
                    'r',
                    'n',
                    'a',
                    'l',
                    'i',
                    's',
                    'm',
                    ',',
                    ' ',
                    'a',
                    'i',
                    'm',
                    'i',
                    'n',
                    'g',
                    ' ',
                    't',
                    'o',
                    ' ',
                    'p',
                    'r',
                    'o',
                    'v',
                    'i',
                    'd',
                    'e',
                    ' ',
                    'v',
                    'a',
                    'l',
                    'u',
                    'a',
                    'b',
                    'l',
                    'e',
                    ' ',
                    'i',
                    'n',
                    'f',
                    'o',
                    'r',
                    'm',
                    'a',
                    't',
                    'i',
                    'o',
                    'n',
                    ' ',
                    'w',
                    'h',
                    'i',
                    'l',
                    'e',
                    ' ',
                    's',
                    'u',
                    'b',
                    't',
                    'l',
                    'y',
                    ' ',
                    'p',
                    'r',
                    'o',
                    'm',
                    'o',
                    't',
                    'i',
                    'n',
                    'g',
                    ' ',
                    'a',
                    ' ',
                    'p',
                    'r',
                    'o',
                    'd',
                    'u',
                    'c',
                    't',
                    ' ',
                    'o',
                    'r',
                    ' ',
                    's',
                    'e',
                    'r',
                    'v',
                    'i',
                    'c',
                    'e',
                    '.',
                    '\n',
                    '\n',
                    'K',
                    'e',
                    'y',
                    ' ',
                    'C',
                    'h',
                    'a',
                    'r',
                    'a',
                    'c',
                    't',
                    'e',
                    'r',
                    'i',
                    's',
                    't',
                    'i',
                    'c',
                    's',
                    ' ',
                    'o',
                    'f',
                    ' ',
                    'A',
                    'd',
                    'v',
                    'e',
                    'r',
                    't',
                    'o',
                    'r',
                    'i',
                    'a',
                    'l',
                    's',
                    '\n',
                    '\n',
                    '\n',
                    '\n',
                    '\n',
                    '\n',
                    'M',
                    'i',
                    'm',
                    'i',
                    'c',
                    's',
                    ' ',
                    'e',
                    'd',
                    'i',
                    't',
                    'o',
                    'r',
                    'i',
                    'a',
                    'l',
                    ' ',
                    'c',
                    'o',
                    'n',
                    't',
                    'e',
                    'n',
                    't',
                    '\n',
                    '\n',
                    '\n',
                    '\n',
                    'B',
                    'l',
                    'e',
                    'n',
                    'd',
                    's',
                    ' ',
                    'a',
                    'd',
                    'v',
                    'e',
                    'r',
                    't',
                    'i',
                    's',
                    'i',
                    'n',
                    'g',
                    ' ',
                    'w',
                    'i',
                    't',
                    'h',
                    ' ',
                    'j',
                    'o',
                    'u',
                    'r',
                    'n',
                    'a',
                    'l',
                    'i',
                    's',
                    'm',
                    '\n',
                    '\n',
                    '\n',
                    '\n',
                    'P',
                    'r',
                    'o',
                    'v',
                    'i',
                    'd',
                    'e',
                    's',
                    ' ',
                    'v',
                    'a',
                    'l',
                    'u',
                    'a',
                    'b',
                    'l',
                    'e',
                    ' ',
                    'i',
                    'n',
                    'f',
                    'o',
                    'r',
                    'm',
                    'a',
                    't',
                    'i',
                    'o',
                    'n',
                    '\n',
                    '\n',
                    '\n',
                    '\n',
                    'S',
                    'u',
                    'b',
                    't',
                    'l',
                    'y',
                    ' ',
                    'p',
                    'r',
                    'o',
                    'm',
                    'o',
                    't',
                    'e',
                    's',
                    ' ',
                    'a',
                    ' ',
                    'p',
                    'r',
                    'o',
                    'd',
                    'u',
                    'c',
                    't',
                    ' ',
                    'o',
                    'r',
                    ' ',
                    's',
                    'e',
                    'r',
                    'v',
                    'i',
                    'c',
                    'e',
                    '\n',
                    '\n',
                    'B',
                    'e',
                    'n',
                    'e',
                    'f',
                    'i',
                    't',
                    's',
                    ' ',
                    'o',
                    'f',
                    ' ',
                    'U',
                    's',
                    'i',
                    'n',
                    'g',
                    ' ',
                    'A',
                    'd',
                    'v',
                    'e',
                    'r',
                    't',
                    'o',
                    'r',
                    'i',
                    'a',
                    'l',
                    's',
                    '\n',
                    '\n',
                    '\n',
                    '\n',
                    '\n',
                    '\n',
                    'B',
                    'u',
                    'i',
                    'l',
                    'd',
                    's',
                    ' ',
                    't',
                    'r',
                    'u',
                    's',
                    't',
                    ' ',
                    'w',
                    'i',
                    't',
                    'h',
                    ' ',
                    't',
                    'h',
                    'e',
                    ' ',
                    'a',
                    'u',
                    'd',
                    'i',
                    'e',
                    'n',
                    'c',
                    'e',
                    '\n',
                    '\n',
                    '\n',
                    '\n',
                    'I',
                    'n',
                    'c',
                    'r',
                    'e',
                    'a',
                    's',
                    'e',
                    's',
                    ' ',
                    'b',
                    'r',
                    'a',
                    'n',
                    'd',
                    ' ',
                    'a',
                    'w',
                    'a',
                    'r',
                    'e',
                    'n',
                    'e',
                    's',
                    's',
                    '\n',
                    '\n',
                    '\n',
                    '\n',
                    'D',
                    'r',
                    'i',
                    'v',
                    'e',
                    's',
                    ' ',
                    'w',
                    'e',
                    'b',
                    's',
                    'i',
                    't',
                    'e',
                    ' ',
                    't',
                    'r',
                    'a',
                    'f',
                    'f',
                    'i',
                    'c',
                    '\n',
                    '\n',
                    '\n',
                    '\n',
                    'G',
                    'e',
                    'n',
                    'e',
                    'r',
                    'a',
                    't',
                    'e',
                    's',
                    ' ',
                    'l',
                    'e',
                    'a',
                    'd',
                    's',
                    ' ',
                    'a',
                    'n',
                    'd',
                    ' ',
                    's',
                    'a',
                    'l',
                    'e',
                    's',
                    '\n',
                    '\n',
                    'C',
                    'r',
                    'e',
                    'a',
                    't',
                    'i',
                    'n',
                    'g',
                    ' ',
                    'E',
                    'f',
                    'f',
                    'e',
                    'c',
                    't',
                    'i',
                    'v',
                    'e',
                    ' ',
                    'A',
                    'd',
                    'v',
                    'e',
                    'r',
                    't',
                    'o',
                    'r',
                    'i',
                    'a',
                    'l',
                    's',
                    '\n',
                    '\n',
                    '\n',
                    '\n',
                    '\n',
                    '\n',
                    'F',
                    'o',
                    'c',
                    'u',
                    's',
                    ' ',
                    'o',
                    'n',
                    ' ',
                    'p',
                    'r',
                    'o',
                    'v',
                    'i',
                    'd',
                    'i',
                    'n',
                    'g',
                    ' ',
                    'v',
                    'a',
                    'l',
                    'u',
                    'e',
                    '\n',
                    '\n',
                    '\n',
                    '\n',
                    'U',
                    's',
                    'e',
                    ' ',
                    'a',
                    ' ',
                    'n',
                    'a',
                    't',
                    'u',
                    'r',
                    'a',
                    'l',
                    ' ',
                    'a',
                    'n',
                    'd',
                    ' ',
                    'e',
                    'n',
                    'g',
                    'a',
                    'g',
                    'i',
                    'n',
                    'g',
                    ' ',
                    't',
                    'o',
                    'n',
                    'e',
                    '\n',
                    '\n',
                    '\n',
                    '\n',
                    'I',
                    'n',
                    't',
                    'e',
                    'g',
                    'r',
                    'a',
                    't',
                    'e',
                    ' ',
                    't',
                    'h',
                    'e',
                    ' ',
                    'p',
                    'r',
                    'o',
                    'd',
                    'u',
                    'c',
                    't',
                    ' ',
                    'o',
                    'r',
                    ' ',
                    's',
                    'e',
                    'r',
                    'v',
                    'i',
                    'c',
                    'e',
                    ' ',
                    's',
                    'e',
                    'a',
                    'm',
                    'l',
                    'e',
                    's',
                    's',
                    'l',
                    'y',
                    '\n',
                    '\n',
                    '\n',
                    '\n',
                    'I',
                    'n',
                    'c',
                    'l',
                    'u',
                    'd',
                    'e',
                    ' ',
                    'a',
                    ' ',
                    'c',
                    'l',
                    'e',
                    'a',
                    'r',
                    ' ',
                    'c',
                    'a',
                    'l',
                    'l',
                    ' ',
                    't',
                    'o',
                    ' ',
                    'a',
                    'c',
                    't',
                    'i',
                    'o',
                    'n',
                ],
                character_start_times_seconds: [
                    0, 0.058, 0.128, 0.151, 0.186, 0.221, 0.255, 0.29, 0.337, 0.36, 0.395,
                    0.453, 0.522, 0.58, 0.639, 0.673, 0.72, 0.801, 0.917, 0.998, 1.068, 1.126,
                    1.242, 1.358, 1.683, 1.683, 1.753, 1.881, 1.927, 2.043, 2.113, 2.159,
                    2.206, 2.229, 2.264, 2.287, 2.31, 2.368, 2.426, 2.485, 2.531, 2.566,
                    2.612, 2.67, 2.798, 2.868, 2.961, 2.984, 3.019, 3.1, 3.135, 3.193, 3.239,
                    3.355, 3.413, 3.46, 3.506, 3.541, 3.576, 3.634, 3.692, 3.75, 3.831, 3.959,
                    4.911, 4.911, 4.992, 5.085, 5.132, 5.178, 5.224, 5.283, 5.341, 5.387,
                    5.445, 5.492, 5.538, 5.631, 6.235, 6.235, 6.409, 6.502, 6.56, 6.618,
                    6.687, 6.734, 6.78, 6.827, 6.908, 7.024, 7.105, 7.163, 7.221, 7.256,
                    7.326, 7.372, 7.407, 7.454, 7.477, 7.523, 7.581, 7.663, 7.709, 7.744,
                    7.779, 7.802, 7.825, 7.895, 7.976, 8.046, 8.092, 8.127, 8.173, 8.231,
                    8.348, 8.406, 8.452, 8.499, 8.533, 8.568, 8.603, 8.638, 8.661, 8.696,
                    8.742, 8.777, 8.893, 8.975, 9.044, 9.102, 9.16, 9.218, 9.276, 9.346,
                    9.427, 9.485, 9.543, 9.613, 9.683, 9.741, 9.799, 9.845, 9.88, 9.95, 9.996,
                    10.077, 10.147, 10.217, 10.298, 10.333, 10.449, 10.507, 10.658, 10.716,
                    10.809, 10.844, 10.879, 10.913, 10.948, 10.983, 11.029, 11.053, 11.134,
                    11.18, 11.262, 11.32, 11.378, 11.413, 11.471, 11.529, 11.575, 11.622,
                    11.68, 11.761, 11.819, 11.877, 11.958, 11.993, 12.063, 12.109, 12.19,
                    12.283, 12.353, 12.423, 12.469, 12.597, 12.678, 12.829, 12.945, 13.27,
                    13.363, 13.433, 13.491, 13.549, 13.618, 13.711, 13.758, 13.816, 13.874,
                    13.932, 14.025, 14.083, 14.129, 14.164, 14.211, 14.269, 14.385, 14.454,
                    14.524, 14.547, 14.571, 14.617, 14.652, 14.675, 14.71, 14.745, 14.814,
                    14.861, 14.907, 14.954, 14.988, 15.023, 15.081, 15.139, 15.197, 15.279,
                    15.406, 15.522, 15.731, 15.859, 15.917, 15.963, 16.01, 16.033, 16.056,
                    16.103, 16.126, 16.149, 16.207, 16.242, 16.288, 16.323, 16.381, 16.497,
                    16.544, 16.59, 16.648, 16.706, 16.788, 16.869, 16.927, 16.973, 17.02,
                    17.066, 17.101, 17.136, 17.159, 17.206, 17.264, 17.298, 17.356, 17.426,
                    17.519, 17.589, 17.635, 17.682, 17.716, 17.774, 17.809, 17.856, 17.914,
                    17.972, 18.018, 18.065, 18.123, 18.181, 18.227, 18.297, 18.378, 18.413,
                    18.459, 18.494, 18.541, 18.576, 18.634, 18.703, 18.773, 18.819, 18.843,
                    18.866, 18.912, 18.935, 18.993, 19.028, 19.086, 19.156, 19.214, 19.261,
                    19.295, 19.33, 19.365, 19.4, 19.423, 19.493, 19.539, 19.597, 19.655,
                    19.725, 19.806, 19.853, 20.062, 20.085, 20.468, 20.468, 20.526, 20.607,
                    20.642, 20.689, 20.723, 20.758, 20.816, 20.874, 20.909, 20.956, 21.002,
                    21.048, 21.106, 21.165, 21.211, 21.257, 21.304, 21.35, 21.397, 21.42,
                    21.443, 21.478, 21.536, 21.583, 21.641, 21.687, 21.722, 21.768, 21.838,
                    21.931, 22.012, 22.07, 22.128, 22.186, 22.314, 22.593, 22.593, 22.593,
                    22.593, 22.593, 22.593, 22.674, 22.755, 22.802, 22.871, 22.929, 22.987,
                    23.057, 23.138, 23.185, 23.254, 23.312, 23.382, 23.452, 23.498, 23.545,
                    23.579, 23.649, 23.696, 23.788, 23.87, 23.939, 24.032, 24.067, 24.102,
                    24.16, 24.16, 24.16, 24.16, 24.206, 24.276, 24.392, 24.427, 24.485,
                    24.555, 24.636, 24.764, 24.833, 24.88, 24.926, 24.973, 25.031, 25.182,
                    25.251, 25.333, 25.356, 25.379, 25.425, 25.449, 25.483, 25.518, 25.553,
                    25.611, 25.658, 25.704, 25.75, 25.785, 25.832, 25.878, 25.936, 26.006,
                    26.087, 26.238, 26.679, 26.679, 26.679, 26.679, 26.772, 26.819, 26.865,
                    26.923, 27.039, 27.086, 27.144, 27.167, 27.225, 27.283, 27.353, 27.422,
                    27.48, 27.527, 27.562, 27.608, 27.643, 27.678, 27.701, 27.747, 27.805,
                    27.84, 27.887, 27.945, 28.026, 28.096, 28.142, 28.189, 28.305, 28.746,
                    28.746, 28.746, 28.746, 28.862, 28.943, 28.99, 29.059, 29.141, 29.175,
                    29.233, 29.268, 29.315, 29.361, 29.419, 29.489, 29.535, 29.582, 29.617,
                    29.651, 29.686, 29.755, 29.79, 29.872, 29.941, 30.011, 30.057, 30.104,
                    30.15, 30.197, 30.231, 30.266, 30.336, 30.382, 30.44, 30.487, 30.557,
                    30.638, 30.684, 30.858, 31.184, 31.184, 31.265, 31.346, 31.404, 31.474,
                    31.543, 31.625, 31.694, 31.741, 31.787, 31.822, 31.857, 31.973, 32.089,
                    32.17, 32.252, 32.275, 32.298, 32.379, 32.461, 32.53, 32.577, 32.623,
                    32.67, 32.728, 32.844, 32.925, 32.983, 33.041, 33.088, 33.146, 33.238,
                    33.238, 33.238, 33.238, 33.238, 33.238, 33.285, 33.343, 33.389, 33.459,
                    33.529, 33.575, 33.633, 33.703, 33.784, 33.865, 33.947, 33.993, 34.028,
                    34.063, 34.098, 34.132, 34.156, 34.191, 34.214, 34.237, 34.26, 34.33,
                    34.399, 34.458, 34.516, 34.574, 34.643, 34.69, 34.736, 34.91, 35.061,
                    35.061, 35.061, 35.061, 35.131, 35.247, 35.317, 35.363, 35.398, 35.444,
                    35.502, 35.63, 35.665, 35.735, 35.781, 35.851, 35.932, 35.978, 36.013,
                    36.06, 36.106, 36.153, 36.234, 36.28, 36.315, 36.362, 36.408, 36.454,
                    36.605, 36.989, 36.989, 36.989, 36.989, 37.081, 37.174, 37.325, 37.372,
                    37.43, 37.465, 37.523, 37.557, 37.65, 37.72, 37.801, 37.917, 37.964,
                    37.999, 38.022, 38.068, 38.126, 38.196, 38.242, 38.312, 38.37, 38.417,
                    38.486, 38.486, 38.486, 38.486, 38.544, 38.602, 38.649, 38.695, 38.753,
                    38.811, 38.858, 38.916, 38.939, 39.032, 39.09, 39.171, 39.241, 39.322,
                    39.369, 39.415, 39.45, 39.473, 39.496, 39.578, 39.636, 39.787, 39.879,
                    39.961, 40.077, 40.46, 40.46, 40.541, 40.599, 40.657, 40.739, 40.797,
                    40.843, 40.866, 40.889, 40.936, 40.971, 41.017, 41.064, 41.122, 41.168,
                    41.226, 41.273, 41.307, 41.342, 41.377, 41.424, 41.482, 41.528, 41.574,
                    41.609, 41.679, 41.76, 41.841, 41.9, 41.958, 42.016, 42.19, 42.573,
                    42.573, 42.573, 42.573, 42.573, 42.573, 42.654, 42.747, 42.828, 42.886,
                    42.944, 43.002, 43.026, 43.061, 43.107, 43.142, 43.177, 43.223, 43.281,
                    43.362, 43.42, 43.478, 43.502, 43.525, 43.595, 43.641, 43.734, 43.827,
                    43.92, 44.129, 44.338, 44.338, 44.338, 44.338, 44.454, 44.523, 44.558,
                    44.593, 44.616, 44.698, 44.744, 44.86, 44.941, 44.988, 45.046, 45.092,
                    45.127, 45.208, 45.231, 45.255, 45.278, 45.347, 45.382, 45.44, 45.51,
                    45.626, 45.707, 45.777, 45.812, 45.835, 45.905, 45.94, 46.114, 46.183,
                    46.357, 46.683, 46.683, 46.683, 46.683, 46.775, 46.868, 46.915, 46.984,
                    47.031, 47.077, 47.124, 47.159, 47.205, 47.228, 47.251, 47.275, 47.298,
                    47.333, 47.379, 47.449, 47.507, 47.588, 47.635, 47.681, 47.716, 47.762,
                    47.797, 47.832, 47.902, 47.948, 48.018, 48.076, 48.134, 48.203, 48.25,
                    48.285, 48.32, 48.378, 48.436, 48.494, 48.575, 48.633, 48.679, 48.726,
                    48.796, 48.877, 48.993, 49.318, 49.318, 49.318, 49.318, 49.434, 49.55,
                    49.608, 49.666, 49.713, 49.759, 49.794, 49.817, 49.84, 49.887, 49.933,
                    49.991, 50.038, 50.084, 50.131, 50.2, 50.235, 50.316, 50.351, 50.398,
                    50.456, 50.479, 50.502, 50.595, 50.688, 50.746, 50.816, 50.851, 50.897,
                ],
                character_end_times_seconds: [
                    0.058, 0.128, 0.151, 0.186, 0.221, 0.255, 0.29, 0.337, 0.36, 0.395, 0.453,
                    0.522, 0.58, 0.639, 0.673, 0.72, 0.801, 0.917, 0.998, 1.068, 1.126, 1.242,
                    1.358, 1.683, 1.683, 1.753, 1.881, 1.927, 2.043, 2.113, 2.159, 2.206,
                    2.229, 2.264, 2.287, 2.31, 2.368, 2.426, 2.485, 2.531, 2.566, 2.612, 2.67,
                    2.798, 2.868, 2.961, 2.984, 3.019, 3.1, 3.135, 3.193, 3.239, 3.355, 3.413,
                    3.46, 3.506, 3.541, 3.576, 3.634, 3.692, 3.75, 3.831, 3.959, 4.911, 4.911,
                    4.992, 5.085, 5.132, 5.178, 5.224, 5.283, 5.341, 5.387, 5.445, 5.492,
                    5.538, 5.631, 6.235, 6.235, 6.409, 6.502, 6.56, 6.618, 6.687, 6.734, 6.78,
                    6.827, 6.908, 7.024, 7.105, 7.163, 7.221, 7.256, 7.326, 7.372, 7.407,
                    7.454, 7.477, 7.523, 7.581, 7.663, 7.709, 7.744, 7.779, 7.802, 7.825,
                    7.895, 7.976, 8.046, 8.092, 8.127, 8.173, 8.231, 8.348, 8.406, 8.452,
                    8.499, 8.533, 8.568, 8.603, 8.638, 8.661, 8.696, 8.742, 8.777, 8.893,
                    8.975, 9.044, 9.102, 9.16, 9.218, 9.276, 9.346, 9.427, 9.485, 9.543,
                    9.613, 9.683, 9.741, 9.799, 9.845, 9.88, 9.95, 9.996, 10.077, 10.147,
                    10.217, 10.298, 10.333, 10.449, 10.507, 10.658, 10.716, 10.809, 10.844,
                    10.879, 10.913, 10.948, 10.983, 11.029, 11.053, 11.134, 11.18, 11.262,
                    11.32, 11.378, 11.413, 11.471, 11.529, 11.575, 11.622, 11.68, 11.761,
                    11.819, 11.877, 11.958, 11.993, 12.063, 12.109, 12.19, 12.283, 12.353,
                    12.423, 12.469, 12.597, 12.678, 12.829, 12.945, 13.27, 13.363, 13.433,
                    13.491, 13.549, 13.618, 13.711, 13.758, 13.816, 13.874, 13.932, 14.025,
                    14.083, 14.129, 14.164, 14.211, 14.269, 14.385, 14.454, 14.524, 14.547,
                    14.571, 14.617, 14.652, 14.675, 14.71, 14.745, 14.814, 14.861, 14.907,
                    14.954, 14.988, 15.023, 15.081, 15.139, 15.197, 15.279, 15.406, 15.522,
                    15.731, 15.859, 15.917, 15.963, 16.01, 16.033, 16.056, 16.103, 16.126,
                    16.149, 16.207, 16.242, 16.288, 16.323, 16.381, 16.497, 16.544, 16.59,
                    16.648, 16.706, 16.788, 16.869, 16.927, 16.973, 17.02, 17.066, 17.101,
                    17.136, 17.159, 17.206, 17.264, 17.298, 17.356, 17.426, 17.519, 17.589,
                    17.635, 17.682, 17.716, 17.774, 17.809, 17.856, 17.914, 17.972, 18.018,
                    18.065, 18.123, 18.181, 18.227, 18.297, 18.378, 18.413, 18.459, 18.494,
                    18.541, 18.576, 18.634, 18.703, 18.773, 18.819, 18.843, 18.866, 18.912,
                    18.935, 18.993, 19.028, 19.086, 19.156, 19.214, 19.261, 19.295, 19.33,
                    19.365, 19.4, 19.423, 19.493, 19.539, 19.597, 19.655, 19.725, 19.806,
                    19.853, 20.062, 20.085, 20.468, 20.468, 20.526, 20.607, 20.642, 20.689,
                    20.723, 20.758, 20.816, 20.874, 20.909, 20.956, 21.002, 21.048, 21.106,
                    21.165, 21.211, 21.257, 21.304, 21.35, 21.397, 21.42, 21.443, 21.478,
                    21.536, 21.583, 21.641, 21.687, 21.722, 21.768, 21.838, 21.931, 22.012,
                    22.07, 22.128, 22.186, 22.314, 22.593, 22.593, 22.593, 22.593, 22.593,
                    22.593, 22.674, 22.755, 22.802, 22.871, 22.929, 22.987, 23.057, 23.138,
                    23.185, 23.254, 23.312, 23.382, 23.452, 23.498, 23.545, 23.579, 23.649,
                    23.696, 23.788, 23.87, 23.939, 24.032, 24.067, 24.102, 24.16, 24.16,
                    24.16, 24.16, 24.206, 24.276, 24.392, 24.427, 24.485, 24.555, 24.636,
                    24.764, 24.833, 24.88, 24.926, 24.973, 25.031, 25.182, 25.251, 25.333,
                    25.356, 25.379, 25.425, 25.449, 25.483, 25.518, 25.553, 25.611, 25.658,
                    25.704, 25.75, 25.785, 25.832, 25.878, 25.936, 26.006, 26.087, 26.238,
                    26.679, 26.679, 26.679, 26.679, 26.772, 26.819, 26.865, 26.923, 27.039,
                    27.086, 27.144, 27.167, 27.225, 27.283, 27.353, 27.422, 27.48, 27.527,
                    27.562, 27.608, 27.643, 27.678, 27.701, 27.747, 27.805, 27.84, 27.887,
                    27.945, 28.026, 28.096, 28.142, 28.189, 28.305, 28.746, 28.746, 28.746,
                    28.746, 28.862, 28.943, 28.99, 29.059, 29.141, 29.175, 29.233, 29.268,
                    29.315, 29.361, 29.419, 29.489, 29.535, 29.582, 29.617, 29.651, 29.686,
                    29.755, 29.79, 29.872, 29.941, 30.011, 30.057, 30.104, 30.15, 30.197,
                    30.231, 30.266, 30.336, 30.382, 30.44, 30.487, 30.557, 30.638, 30.684,
                    30.858, 31.184, 31.184, 31.265, 31.346, 31.404, 31.474, 31.543, 31.625,
                    31.694, 31.741, 31.787, 31.822, 31.857, 31.973, 32.089, 32.17, 32.252,
                    32.275, 32.298, 32.379, 32.461, 32.53, 32.577, 32.623, 32.67, 32.728,
                    32.844, 32.925, 32.983, 33.041, 33.088, 33.146, 33.238, 33.238, 33.238,
                    33.238, 33.238, 33.238, 33.285, 33.343, 33.389, 33.459, 33.529, 33.575,
                    33.633, 33.703, 33.784, 33.865, 33.947, 33.993, 34.028, 34.063, 34.098,
                    34.132, 34.156, 34.191, 34.214, 34.237, 34.26, 34.33, 34.399, 34.458,
                    34.516, 34.574, 34.643, 34.69, 34.736, 34.91, 35.061, 35.061, 35.061,
                    35.061, 35.131, 35.247, 35.317, 35.363, 35.398, 35.444, 35.502, 35.63,
                    35.665, 35.735, 35.781, 35.851, 35.932, 35.978, 36.013, 36.06, 36.106,
                    36.153, 36.234, 36.28, 36.315, 36.362, 36.408, 36.454, 36.605, 36.989,
                    36.989, 36.989, 36.989, 37.081, 37.174, 37.325, 37.372, 37.43, 37.465,
                    37.523, 37.557, 37.65, 37.72, 37.801, 37.917, 37.964, 37.999, 38.022,
                    38.068, 38.126, 38.196, 38.242, 38.312, 38.37, 38.417, 38.486, 38.486,
                    38.486, 38.486, 38.544, 38.602, 38.649, 38.695, 38.753, 38.811, 38.858,
                    38.916, 38.939, 39.032, 39.09, 39.171, 39.241, 39.322, 39.369, 39.415,
                    39.45, 39.473, 39.496, 39.578, 39.636, 39.787, 39.879, 39.961, 40.077,
                    40.46, 40.46, 40.541, 40.599, 40.657, 40.739, 40.797, 40.843, 40.866,
                    40.889, 40.936, 40.971, 41.017, 41.064, 41.122, 41.168, 41.226, 41.273,
                    41.307, 41.342, 41.377, 41.424, 41.482, 41.528, 41.574, 41.609, 41.679,
                    41.76, 41.841, 41.9, 41.958, 42.016, 42.19, 42.573, 42.573, 42.573,
                    42.573, 42.573, 42.573, 42.654, 42.747, 42.828, 42.886, 42.944, 43.002,
                    43.026, 43.061, 43.107, 43.142, 43.177, 43.223, 43.281, 43.362, 43.42,
                    43.478, 43.502, 43.525, 43.595, 43.641, 43.734, 43.827, 43.92, 44.129,
                    44.338, 44.338, 44.338, 44.338, 44.454, 44.523, 44.558, 44.593, 44.616,
                    44.698, 44.744, 44.86, 44.941, 44.988, 45.046, 45.092, 45.127, 45.208,
                    45.231, 45.255, 45.278, 45.347, 45.382, 45.44, 45.51, 45.626, 45.707,
                    45.777, 45.812, 45.835, 45.905, 45.94, 46.114, 46.183, 46.357, 46.683,
                    46.683, 46.683, 46.683, 46.775, 46.868, 46.915, 46.984, 47.031, 47.077,
                    47.124, 47.159, 47.205, 47.228, 47.251, 47.275, 47.298, 47.333, 47.379,
                    47.449, 47.507, 47.588, 47.635, 47.681, 47.716, 47.762, 47.797, 47.832,
                    47.902, 47.948, 48.018, 48.076, 48.134, 48.203, 48.25, 48.285, 48.32,
                    48.378, 48.436, 48.494, 48.575, 48.633, 48.679, 48.726, 48.796, 48.877,
                    48.993, 49.318, 49.318, 49.318, 49.318, 49.434, 49.55, 49.608, 49.666,
                    49.713, 49.759, 49.794, 49.817, 49.84, 49.887, 49.933, 49.991, 50.038,
                    50.084, 50.131, 50.2, 50.235, 50.316, 50.351, 50.398, 50.456, 50.479,
                    50.502, 50.595, 50.688, 50.746, 50.816, 50.851, 50.897, 51.547,
                ],
            },
            normalized_alignment: {
                characters: [
                    ' ',
                    'W',
                    'h',
                    'a',
                    't',
                    ' ',
                    'i',
                    's',
                    ' ',
                    'a',
                    'n',
                    ' ',
                    'A',
                    'd',
                    'v',
                    'e',
                    'r',
                    't',
                    'o',
                    'r',
                    'i',
                    'a',
                    'l',
                    '?',
                    ' ',
                    'A',
                    ' ',
                    'H',
                    'y',
                    'b',
                    'r',
                    'i',
                    'd',
                    ' ',
                    'o',
                    'f',
                    ' ',
                    'A',
                    'd',
                    'v',
                    'e',
                    'r',
                    't',
                    'i',
                    's',
                    'i',
                    'n',
                    'g',
                    ' ',
                    'a',
                    'n',
                    'd',
                    ' ',
                    'J',
                    'o',
                    'u',
                    'r',
                    'n',
                    'a',
                    'l',
                    'i',
                    's',
                    'm',
                    ' ',
                    'I',
                    'n',
                    't',
                    'r',
                    'o',
                    'd',
                    'u',
                    'c',
                    't',
                    'i',
                    'o',
                    'n',
                    ' ',
                    'A',
                    'n',
                    ' ',
                    'a',
                    'd',
                    'v',
                    'e',
                    'r',
                    't',
                    'o',
                    'r',
                    'i',
                    'a',
                    'l',
                    ' ',
                    'i',
                    's',
                    ' ',
                    'a',
                    ' ',
                    't',
                    'y',
                    'p',
                    'e',
                    ' ',
                    'o',
                    'f',
                    ' ',
                    'a',
                    'd',
                    'v',
                    'e',
                    'r',
                    't',
                    'i',
                    's',
                    'e',
                    'm',
                    'e',
                    'n',
                    't',
                    ' ',
                    't',
                    'h',
                    'a',
                    't',
                    ' ',
                    'm',
                    'i',
                    'm',
                    'i',
                    'c',
                    's',
                    ' ',
                    'e',
                    'd',
                    'i',
                    't',
                    'o',
                    'r',
                    'i',
                    'a',
                    'l',
                    ' ',
                    'c',
                    'o',
                    'n',
                    't',
                    'e',
                    'n',
                    't',
                    ',',
                    ' ',
                    's',
                    'u',
                    'c',
                    'h',
                    ' ',
                    'a',
                    's',
                    ' ',
                    'a',
                    ' ',
                    'n',
                    'e',
                    'w',
                    's',
                    ' ',
                    'a',
                    'r',
                    't',
                    'i',
                    'c',
                    'l',
                    'e',
                    ' ',
                    'o',
                    'r',
                    ' ',
                    'b',
                    'l',
                    'o',
                    'g',
                    ' ',
                    'p',
                    'o',
                    's',
                    't',
                    '.',
                    ' ',
                    'I',
                    't',
                    ' ',
                    'b',
                    'l',
                    'e',
                    'n',
                    'd',
                    's',
                    ' ',
                    'a',
                    'd',
                    'v',
                    'e',
                    'r',
                    't',
                    'i',
                    's',
                    'i',
                    'n',
                    'g',
                    ' ',
                    'w',
                    'i',
                    't',
                    'h',
                    ' ',
                    'j',
                    'o',
                    'u',
                    'r',
                    'n',
                    'a',
                    'l',
                    'i',
                    's',
                    'm',
                    ',',
                    ' ',
                    'a',
                    'i',
                    'm',
                    'i',
                    'n',
                    'g',
                    ' ',
                    't',
                    'o',
                    ' ',
                    'p',
                    'r',
                    'o',
                    'v',
                    'i',
                    'd',
                    'e',
                    ' ',
                    'v',
                    'a',
                    'l',
                    'u',
                    'a',
                    'b',
                    'l',
                    'e',
                    ' ',
                    'i',
                    'n',
                    'f',
                    'o',
                    'r',
                    'm',
                    'a',
                    't',
                    'i',
                    'o',
                    'n',
                    ' ',
                    'w',
                    'h',
                    'i',
                    'l',
                    'e',
                    ' ',
                    's',
                    'u',
                    'b',
                    't',
                    'l',
                    'y',
                    ' ',
                    'p',
                    'r',
                    'o',
                    'm',
                    'o',
                    't',
                    'i',
                    'n',
                    'g',
                    ' ',
                    'a',
                    ' ',
                    'p',
                    'r',
                    'o',
                    'd',
                    'u',
                    'c',
                    't',
                    ' ',
                    'o',
                    'r',
                    ' ',
                    's',
                    'e',
                    'r',
                    'v',
                    'i',
                    'c',
                    'e',
                    '.',
                    ' ',
                    'K',
                    'e',
                    'y',
                    ' ',
                    'C',
                    'h',
                    'a',
                    'r',
                    'a',
                    'c',
                    't',
                    'e',
                    'r',
                    'i',
                    's',
                    't',
                    'i',
                    'c',
                    's',
                    ' ',
                    'o',
                    'f',
                    ' ',
                    'A',
                    'd',
                    'v',
                    'e',
                    'r',
                    't',
                    'o',
                    'r',
                    'i',
                    'a',
                    'l',
                    's',
                    ' ',
                    'M',
                    'i',
                    'm',
                    'i',
                    'c',
                    's',
                    ' ',
                    'e',
                    'd',
                    'i',
                    't',
                    'o',
                    'r',
                    'i',
                    'a',
                    'l',
                    ' ',
                    'c',
                    'o',
                    'n',
                    't',
                    'e',
                    'n',
                    't',
                    ' ',
                    'B',
                    'l',
                    'e',
                    'n',
                    'd',
                    's',
                    ' ',
                    'a',
                    'd',
                    'v',
                    'e',
                    'r',
                    't',
                    'i',
                    's',
                    'i',
                    'n',
                    'g',
                    ' ',
                    'w',
                    'i',
                    't',
                    'h',
                    ' ',
                    'j',
                    'o',
                    'u',
                    'r',
                    'n',
                    'a',
                    'l',
                    'i',
                    's',
                    'm',
                    ' ',
                    'P',
                    'r',
                    'o',
                    'v',
                    'i',
                    'd',
                    'e',
                    's',
                    ' ',
                    'v',
                    'a',
                    'l',
                    'u',
                    'a',
                    'b',
                    'l',
                    'e',
                    ' ',
                    'i',
                    'n',
                    'f',
                    'o',
                    'r',
                    'm',
                    'a',
                    't',
                    'i',
                    'o',
                    'n',
                    ' ',
                    'S',
                    'u',
                    'b',
                    't',
                    'l',
                    'y',
                    ' ',
                    'p',
                    'r',
                    'o',
                    'm',
                    'o',
                    't',
                    'e',
                    's',
                    ' ',
                    'a',
                    ' ',
                    'p',
                    'r',
                    'o',
                    'd',
                    'u',
                    'c',
                    't',
                    ' ',
                    'o',
                    'r',
                    ' ',
                    's',
                    'e',
                    'r',
                    'v',
                    'i',
                    'c',
                    'e',
                    ' ',
                    'B',
                    'e',
                    'n',
                    'e',
                    'f',
                    'i',
                    't',
                    's',
                    ' ',
                    'o',
                    'f',
                    ' ',
                    'U',
                    's',
                    'i',
                    'n',
                    'g',
                    ' ',
                    'A',
                    'd',
                    'v',
                    'e',
                    'r',
                    't',
                    'o',
                    'r',
                    'i',
                    'a',
                    'l',
                    's',
                    ' ',
                    'B',
                    'u',
                    'i',
                    'l',
                    'd',
                    's',
                    ' ',
                    't',
                    'r',
                    'u',
                    's',
                    't',
                    ' ',
                    'w',
                    'i',
                    't',
                    'h',
                    ' ',
                    't',
                    'h',
                    'e',
                    ' ',
                    'a',
                    'u',
                    'd',
                    'i',
                    'e',
                    'n',
                    'c',
                    'e',
                    ' ',
                    'I',
                    'n',
                    'c',
                    'r',
                    'e',
                    'a',
                    's',
                    'e',
                    's',
                    ' ',
                    'b',
                    'r',
                    'a',
                    'n',
                    'd',
                    ' ',
                    'a',
                    'w',
                    'a',
                    'r',
                    'e',
                    'n',
                    'e',
                    's',
                    's',
                    ' ',
                    'D',
                    'r',
                    'i',
                    'v',
                    'e',
                    's',
                    ' ',
                    'w',
                    'e',
                    'b',
                    's',
                    'i',
                    't',
                    'e',
                    ' ',
                    't',
                    'r',
                    'a',
                    'f',
                    'f',
                    'i',
                    'c',
                    ' ',
                    'G',
                    'e',
                    'n',
                    'e',
                    'r',
                    'a',
                    't',
                    'e',
                    's',
                    ' ',
                    'l',
                    'e',
                    'a',
                    'd',
                    's',
                    ' ',
                    'a',
                    'n',
                    'd',
                    ' ',
                    's',
                    'a',
                    'l',
                    'e',
                    's',
                    ' ',
                    'C',
                    'r',
                    'e',
                    'a',
                    't',
                    'i',
                    'n',
                    'g',
                    ' ',
                    'E',
                    'f',
                    'f',
                    'e',
                    'c',
                    't',
                    'i',
                    'v',
                    'e',
                    ' ',
                    'A',
                    'd',
                    'v',
                    'e',
                    'r',
                    't',
                    'o',
                    'r',
                    'i',
                    'a',
                    'l',
                    's',
                    ' ',
                    'F',
                    'o',
                    'c',
                    'u',
                    's',
                    ' ',
                    'o',
                    'n',
                    ' ',
                    'p',
                    'r',
                    'o',
                    'v',
                    'i',
                    'd',
                    'i',
                    'n',
                    'g',
                    ' ',
                    'v',
                    'a',
                    'l',
                    'u',
                    'e',
                    ' ',
                    'U',
                    's',
                    'e',
                    ' ',
                    'a',
                    ' ',
                    'n',
                    'a',
                    't',
                    'u',
                    'r',
                    'a',
                    'l',
                    ' ',
                    'a',
                    'n',
                    'd',
                    ' ',
                    'e',
                    'n',
                    'g',
                    'a',
                    'g',
                    'i',
                    'n',
                    'g',
                    ' ',
                    't',
                    'o',
                    'n',
                    'e',
                    ' ',
                    'I',
                    'n',
                    't',
                    'e',
                    'g',
                    'r',
                    'a',
                    't',
                    'e',
                    ' ',
                    't',
                    'h',
                    'e',
                    ' ',
                    'p',
                    'r',
                    'o',
                    'd',
                    'u',
                    'c',
                    't',
                    ' ',
                    'o',
                    'r',
                    ' ',
                    's',
                    'e',
                    'r',
                    'v',
                    'i',
                    'c',
                    'e',
                    ' ',
                    's',
                    'e',
                    'a',
                    'm',
                    'l',
                    'e',
                    's',
                    's',
                    'l',
                    'y',
                    ' ',
                    'I',
                    'n',
                    'c',
                    'l',
                    'u',
                    'd',
                    'e',
                    ' ',
                    'a',
                    ' ',
                    'c',
                    'l',
                    'e',
                    'a',
                    'r',
                    ' ',
                    'c',
                    'a',
                    'l',
                    'l',
                    ' ',
                    't',
                    'o',
                    ' ',
                    'a',
                    'c',
                    't',
                    'i',
                    'o',
                    'n',
                    ' ',
                ],
                character_start_times_seconds: [
                    0, 0.035, 0.058, 0.128, 0.151, 0.186, 0.221, 0.255, 0.29, 0.337, 0.36,
                    0.395, 0.453, 0.522, 0.58, 0.639, 0.673, 0.72, 0.801, 0.917, 0.998, 1.068,
                    1.126, 1.242, 1.358, 1.683, 1.753, 1.881, 1.927, 2.043, 2.113, 2.159,
                    2.206, 2.229, 2.264, 2.287, 2.31, 2.368, 2.426, 2.485, 2.531, 2.566,
                    2.612, 2.67, 2.798, 2.868, 2.961, 2.984, 3.019, 3.1, 3.135, 3.193, 3.239,
                    3.355, 3.413, 3.46, 3.506, 3.541, 3.576, 3.634, 3.692, 3.75, 3.831, 3.959,
                    4.911, 4.992, 5.085, 5.132, 5.178, 5.224, 5.283, 5.341, 5.387, 5.445,
                    5.492, 5.538, 5.631, 6.235, 6.409, 6.502, 6.56, 6.618, 6.687, 6.734, 6.78,
                    6.827, 6.908, 7.024, 7.105, 7.163, 7.221, 7.256, 7.326, 7.372, 7.407,
                    7.454, 7.477, 7.523, 7.581, 7.663, 7.709, 7.744, 7.779, 7.802, 7.825,
                    7.895, 7.976, 8.046, 8.092, 8.127, 8.173, 8.231, 8.348, 8.406, 8.452,
                    8.499, 8.533, 8.568, 8.603, 8.638, 8.661, 8.696, 8.742, 8.777, 8.893,
                    8.975, 9.044, 9.102, 9.16, 9.218, 9.276, 9.346, 9.427, 9.485, 9.543,
                    9.613, 9.683, 9.741, 9.799, 9.845, 9.88, 9.95, 9.996, 10.077, 10.147,
                    10.217, 10.298, 10.333, 10.449, 10.507, 10.658, 10.716, 10.809, 10.844,
                    10.879, 10.913, 10.948, 10.983, 11.029, 11.053, 11.134, 11.18, 11.262,
                    11.32, 11.378, 11.413, 11.471, 11.529, 11.575, 11.622, 11.68, 11.761,
                    11.819, 11.877, 11.958, 11.993, 12.063, 12.109, 12.19, 12.283, 12.353,
                    12.423, 12.469, 12.597, 12.678, 12.829, 12.945, 13.27, 13.363, 13.433,
                    13.491, 13.549, 13.618, 13.711, 13.758, 13.816, 13.874, 13.932, 14.025,
                    14.083, 14.129, 14.164, 14.211, 14.269, 14.385, 14.454, 14.524, 14.547,
                    14.571, 14.617, 14.652, 14.675, 14.71, 14.745, 14.814, 14.861, 14.907,
                    14.954, 14.988, 15.023, 15.081, 15.139, 15.197, 15.279, 15.406, 15.522,
                    15.731, 15.859, 15.917, 15.963, 16.01, 16.033, 16.056, 16.103, 16.126,
                    16.149, 16.207, 16.242, 16.288, 16.323, 16.381, 16.497, 16.544, 16.59,
                    16.648, 16.706, 16.788, 16.869, 16.927, 16.973, 17.02, 17.066, 17.101,
                    17.136, 17.159, 17.206, 17.264, 17.298, 17.356, 17.426, 17.519, 17.589,
                    17.635, 17.682, 17.716, 17.774, 17.809, 17.856, 17.914, 17.972, 18.018,
                    18.065, 18.123, 18.181, 18.227, 18.297, 18.378, 18.413, 18.459, 18.494,
                    18.541, 18.576, 18.634, 18.703, 18.773, 18.819, 18.843, 18.866, 18.912,
                    18.935, 18.993, 19.028, 19.086, 19.156, 19.214, 19.261, 19.295, 19.33,
                    19.365, 19.4, 19.423, 19.493, 19.539, 19.597, 19.655, 19.725, 19.806,
                    19.853, 20.062, 20.085, 20.468, 20.526, 20.607, 20.642, 20.689, 20.723,
                    20.758, 20.816, 20.874, 20.909, 20.956, 21.002, 21.048, 21.106, 21.165,
                    21.211, 21.257, 21.304, 21.35, 21.397, 21.42, 21.443, 21.478, 21.536,
                    21.583, 21.641, 21.687, 21.722, 21.768, 21.838, 21.931, 22.012, 22.07,
                    22.128, 22.186, 22.314, 22.593, 22.674, 22.755, 22.802, 22.871, 22.929,
                    22.987, 23.057, 23.138, 23.185, 23.254, 23.312, 23.382, 23.452, 23.498,
                    23.545, 23.579, 23.649, 23.696, 23.788, 23.87, 23.939, 24.032, 24.067,
                    24.102, 24.16, 24.206, 24.276, 24.392, 24.427, 24.485, 24.555, 24.636,
                    24.764, 24.833, 24.88, 24.926, 24.973, 25.031, 25.182, 25.251, 25.333,
                    25.356, 25.379, 25.425, 25.449, 25.483, 25.518, 25.553, 25.611, 25.658,
                    25.704, 25.75, 25.785, 25.832, 25.878, 25.936, 26.006, 26.087, 26.238,
                    26.679, 26.772, 26.819, 26.865, 26.923, 27.039, 27.086, 27.144, 27.167,
                    27.225, 27.283, 27.353, 27.422, 27.48, 27.527, 27.562, 27.608, 27.643,
                    27.678, 27.701, 27.747, 27.805, 27.84, 27.887, 27.945, 28.026, 28.096,
                    28.142, 28.189, 28.305, 28.746, 28.862, 28.943, 28.99, 29.059, 29.141,
                    29.175, 29.233, 29.268, 29.315, 29.361, 29.419, 29.489, 29.535, 29.582,
                    29.617, 29.651, 29.686, 29.755, 29.79, 29.872, 29.941, 30.011, 30.057,
                    30.104, 30.15, 30.197, 30.231, 30.266, 30.336, 30.382, 30.44, 30.487,
                    30.557, 30.638, 30.684, 30.858, 31.184, 31.265, 31.346, 31.404, 31.474,
                    31.543, 31.625, 31.694, 31.741, 31.787, 31.822, 31.857, 31.973, 32.089,
                    32.17, 32.252, 32.275, 32.298, 32.379, 32.461, 32.53, 32.577, 32.623,
                    32.67, 32.728, 32.844, 32.925, 32.983, 33.041, 33.088, 33.146, 33.238,
                    33.285, 33.343, 33.389, 33.459, 33.529, 33.575, 33.633, 33.703, 33.784,
                    33.865, 33.947, 33.993, 34.028, 34.063, 34.098, 34.132, 34.156, 34.191,
                    34.214, 34.237, 34.26, 34.33, 34.399, 34.458, 34.516, 34.574, 34.643,
                    34.69, 34.736, 34.91, 35.061, 35.131, 35.247, 35.317, 35.363, 35.398,
                    35.444, 35.502, 35.63, 35.665, 35.735, 35.781, 35.851, 35.932, 35.978,
                    36.013, 36.06, 36.106, 36.153, 36.234, 36.28, 36.315, 36.362, 36.408,
                    36.454, 36.605, 36.989, 37.081, 37.174, 37.325, 37.372, 37.43, 37.465,
                    37.523, 37.557, 37.65, 37.72, 37.801, 37.917, 37.964, 37.999, 38.022,
                    38.068, 38.126, 38.196, 38.242, 38.312, 38.37, 38.417, 38.486, 38.544,
                    38.602, 38.649, 38.695, 38.753, 38.811, 38.858, 38.916, 38.939, 39.032,
                    39.09, 39.171, 39.241, 39.322, 39.369, 39.415, 39.45, 39.473, 39.496,
                    39.578, 39.636, 39.787, 39.879, 39.961, 40.077, 40.46, 40.541, 40.599,
                    40.657, 40.739, 40.797, 40.843, 40.866, 40.889, 40.936, 40.971, 41.017,
                    41.064, 41.122, 41.168, 41.226, 41.273, 41.307, 41.342, 41.377, 41.424,
                    41.482, 41.528, 41.574, 41.609, 41.679, 41.76, 41.841, 41.9, 41.958,
                    42.016, 42.19, 42.573, 42.654, 42.747, 42.828, 42.886, 42.944, 43.002,
                    43.026, 43.061, 43.107, 43.142, 43.177, 43.223, 43.281, 43.362, 43.42,
                    43.478, 43.502, 43.525, 43.595, 43.641, 43.734, 43.827, 43.92, 44.129,
                    44.338, 44.454, 44.523, 44.558, 44.593, 44.616, 44.698, 44.744, 44.86,
                    44.941, 44.988, 45.046, 45.092, 45.127, 45.208, 45.231, 45.255, 45.278,
                    45.347, 45.382, 45.44, 45.51, 45.626, 45.707, 45.777, 45.812, 45.835,
                    45.905, 45.94, 46.114, 46.183, 46.357, 46.683, 46.775, 46.868, 46.915,
                    46.984, 47.031, 47.077, 47.124, 47.159, 47.205, 47.228, 47.251, 47.275,
                    47.298, 47.333, 47.379, 47.449, 47.507, 47.588, 47.635, 47.681, 47.716,
                    47.762, 47.797, 47.832, 47.902, 47.948, 48.018, 48.076, 48.134, 48.203,
                    48.25, 48.285, 48.32, 48.378, 48.436, 48.494, 48.575, 48.633, 48.679,
                    48.726, 48.796, 48.877, 48.993, 49.318, 49.434, 49.55, 49.608, 49.666,
                    49.713, 49.759, 49.794, 49.817, 49.84, 49.887, 49.933, 49.991, 50.038,
                    50.084, 50.131, 50.2, 50.235, 50.316, 50.351, 50.398, 50.456, 50.479,
                    50.502, 50.595, 50.688, 50.746, 50.816, 50.851, 50.897, 50.932,
                ],
                character_end_times_seconds: [
                    0.035, 0.058, 0.128, 0.151, 0.186, 0.221, 0.255, 0.29, 0.337, 0.36, 0.395,
                    0.453, 0.522, 0.58, 0.639, 0.673, 0.72, 0.801, 0.917, 0.998, 1.068, 1.126,
                    1.242, 1.358, 1.683, 1.753, 1.881, 1.927, 2.043, 2.113, 2.159, 2.206,
                    2.229, 2.264, 2.287, 2.31, 2.368, 2.426, 2.485, 2.531, 2.566, 2.612, 2.67,
                    2.798, 2.868, 2.961, 2.984, 3.019, 3.1, 3.135, 3.193, 3.239, 3.355, 3.413,
                    3.46, 3.506, 3.541, 3.576, 3.634, 3.692, 3.75, 3.831, 3.959, 4.911, 4.992,
                    5.085, 5.132, 5.178, 5.224, 5.283, 5.341, 5.387, 5.445, 5.492, 5.538,
                    5.631, 6.235, 6.409, 6.502, 6.56, 6.618, 6.687, 6.734, 6.78, 6.827, 6.908,
                    7.024, 7.105, 7.163, 7.221, 7.256, 7.326, 7.372, 7.407, 7.454, 7.477,
                    7.523, 7.581, 7.663, 7.709, 7.744, 7.779, 7.802, 7.825, 7.895, 7.976,
                    8.046, 8.092, 8.127, 8.173, 8.231, 8.348, 8.406, 8.452, 8.499, 8.533,
                    8.568, 8.603, 8.638, 8.661, 8.696, 8.742, 8.777, 8.893, 8.975, 9.044,
                    9.102, 9.16, 9.218, 9.276, 9.346, 9.427, 9.485, 9.543, 9.613, 9.683,
                    9.741, 9.799, 9.845, 9.88, 9.95, 9.996, 10.077, 10.147, 10.217, 10.298,
                    10.333, 10.449, 10.507, 10.658, 10.716, 10.809, 10.844, 10.879, 10.913,
                    10.948, 10.983, 11.029, 11.053, 11.134, 11.18, 11.262, 11.32, 11.378,
                    11.413, 11.471, 11.529, 11.575, 11.622, 11.68, 11.761, 11.819, 11.877,
                    11.958, 11.993, 12.063, 12.109, 12.19, 12.283, 12.353, 12.423, 12.469,
                    12.597, 12.678, 12.829, 12.945, 13.27, 13.363, 13.433, 13.491, 13.549,
                    13.618, 13.711, 13.758, 13.816, 13.874, 13.932, 14.025, 14.083, 14.129,
                    14.164, 14.211, 14.269, 14.385, 14.454, 14.524, 14.547, 14.571, 14.617,
                    14.652, 14.675, 14.71, 14.745, 14.814, 14.861, 14.907, 14.954, 14.988,
                    15.023, 15.081, 15.139, 15.197, 15.279, 15.406, 15.522, 15.731, 15.859,
                    15.917, 15.963, 16.01, 16.033, 16.056, 16.103, 16.126, 16.149, 16.207,
                    16.242, 16.288, 16.323, 16.381, 16.497, 16.544, 16.59, 16.648, 16.706,
                    16.788, 16.869, 16.927, 16.973, 17.02, 17.066, 17.101, 17.136, 17.159,
                    17.206, 17.264, 17.298, 17.356, 17.426, 17.519, 17.589, 17.635, 17.682,
                    17.716, 17.774, 17.809, 17.856, 17.914, 17.972, 18.018, 18.065, 18.123,
                    18.181, 18.227, 18.297, 18.378, 18.413, 18.459, 18.494, 18.541, 18.576,
                    18.634, 18.703, 18.773, 18.819, 18.843, 18.866, 18.912, 18.935, 18.993,
                    19.028, 19.086, 19.156, 19.214, 19.261, 19.295, 19.33, 19.365, 19.4,
                    19.423, 19.493, 19.539, 19.597, 19.655, 19.725, 19.806, 19.853, 20.062,
                    20.085, 20.468, 20.526, 20.607, 20.642, 20.689, 20.723, 20.758, 20.816,
                    20.874, 20.909, 20.956, 21.002, 21.048, 21.106, 21.165, 21.211, 21.257,
                    21.304, 21.35, 21.397, 21.42, 21.443, 21.478, 21.536, 21.583, 21.641,
                    21.687, 21.722, 21.768, 21.838, 21.931, 22.012, 22.07, 22.128, 22.186,
                    22.314, 22.593, 22.674, 22.755, 22.802, 22.871, 22.929, 22.987, 23.057,
                    23.138, 23.185, 23.254, 23.312, 23.382, 23.452, 23.498, 23.545, 23.579,
                    23.649, 23.696, 23.788, 23.87, 23.939, 24.032, 24.067, 24.102, 24.16,
                    24.206, 24.276, 24.392, 24.427, 24.485, 24.555, 24.636, 24.764, 24.833,
                    24.88, 24.926, 24.973, 25.031, 25.182, 25.251, 25.333, 25.356, 25.379,
                    25.425, 25.449, 25.483, 25.518, 25.553, 25.611, 25.658, 25.704, 25.75,
                    25.785, 25.832, 25.878, 25.936, 26.006, 26.087, 26.238, 26.679, 26.772,
                    26.819, 26.865, 26.923, 27.039, 27.086, 27.144, 27.167, 27.225, 27.283,
                    27.353, 27.422, 27.48, 27.527, 27.562, 27.608, 27.643, 27.678, 27.701,
                    27.747, 27.805, 27.84, 27.887, 27.945, 28.026, 28.096, 28.142, 28.189,
                    28.305, 28.746, 28.862, 28.943, 28.99, 29.059, 29.141, 29.175, 29.233,
                    29.268, 29.315, 29.361, 29.419, 29.489, 29.535, 29.582, 29.617, 29.651,
                    29.686, 29.755, 29.79, 29.872, 29.941, 30.011, 30.057, 30.104, 30.15,
                    30.197, 30.231, 30.266, 30.336, 30.382, 30.44, 30.487, 30.557, 30.638,
                    30.684, 30.858, 31.184, 31.265, 31.346, 31.404, 31.474, 31.543, 31.625,
                    31.694, 31.741, 31.787, 31.822, 31.857, 31.973, 32.089, 32.17, 32.252,
                    32.275, 32.298, 32.379, 32.461, 32.53, 32.577, 32.623, 32.67, 32.728,
                    32.844, 32.925, 32.983, 33.041, 33.088, 33.146, 33.238, 33.285, 33.343,
                    33.389, 33.459, 33.529, 33.575, 33.633, 33.703, 33.784, 33.865, 33.947,
                    33.993, 34.028, 34.063, 34.098, 34.132, 34.156, 34.191, 34.214, 34.237,
                    34.26, 34.33, 34.399, 34.458, 34.516, 34.574, 34.643, 34.69, 34.736,
                    34.91, 35.061, 35.131, 35.247, 35.317, 35.363, 35.398, 35.444, 35.502,
                    35.63, 35.665, 35.735, 35.781, 35.851, 35.932, 35.978, 36.013, 36.06,
                    36.106, 36.153, 36.234, 36.28, 36.315, 36.362, 36.408, 36.454, 36.605,
                    36.989, 37.081, 37.174, 37.325, 37.372, 37.43, 37.465, 37.523, 37.557,
                    37.65, 37.72, 37.801, 37.917, 37.964, 37.999, 38.022, 38.068, 38.126,
                    38.196, 38.242, 38.312, 38.37, 38.417, 38.486, 38.544, 38.602, 38.649,
                    38.695, 38.753, 38.811, 38.858, 38.916, 38.939, 39.032, 39.09, 39.171,
                    39.241, 39.322, 39.369, 39.415, 39.45, 39.473, 39.496, 39.578, 39.636,
                    39.787, 39.879, 39.961, 40.077, 40.46, 40.541, 40.599, 40.657, 40.739,
                    40.797, 40.843, 40.866, 40.889, 40.936, 40.971, 41.017, 41.064, 41.122,
                    41.168, 41.226, 41.273, 41.307, 41.342, 41.377, 41.424, 41.482, 41.528,
                    41.574, 41.609, 41.679, 41.76, 41.841, 41.9, 41.958, 42.016, 42.19,
                    42.573, 42.654, 42.747, 42.828, 42.886, 42.944, 43.002, 43.026, 43.061,
                    43.107, 43.142, 43.177, 43.223, 43.281, 43.362, 43.42, 43.478, 43.502,
                    43.525, 43.595, 43.641, 43.734, 43.827, 43.92, 44.129, 44.338, 44.454,
                    44.523, 44.558, 44.593, 44.616, 44.698, 44.744, 44.86, 44.941, 44.988,
                    45.046, 45.092, 45.127, 45.208, 45.231, 45.255, 45.278, 45.347, 45.382,
                    45.44, 45.51, 45.626, 45.707, 45.777, 45.812, 45.835, 45.905, 45.94,
                    46.114, 46.183, 46.357, 46.683, 46.775, 46.868, 46.915, 46.984, 47.031,
                    47.077, 47.124, 47.159, 47.205, 47.228, 47.251, 47.275, 47.298, 47.333,
                    47.379, 47.449, 47.507, 47.588, 47.635, 47.681, 47.716, 47.762, 47.797,
                    47.832, 47.902, 47.948, 48.018, 48.076, 48.134, 48.203, 48.25, 48.285,
                    48.32, 48.378, 48.436, 48.494, 48.575, 48.633, 48.679, 48.726, 48.796,
                    48.877, 48.993, 49.318, 49.434, 49.55, 49.608, 49.666, 49.713, 49.759,
                    49.794, 49.817, 49.84, 49.887, 49.933, 49.991, 50.038, 50.084, 50.131,
                    50.2, 50.235, 50.316, 50.351, 50.398, 50.456, 50.479, 50.502, 50.595,
                    50.688, 50.746, 50.816, 50.851, 50.897, 50.932, 51.547,
                ],
            },
        },
        editable: true,
        autofocus: false,
        characterLimit: null,
        updateHandler: (editor) => { },
        selectionHandler: (selectedText) => { },
        createHandler: () => { },
        imageUploadHandler: (file) => Promise.resolve({ name: "", url: "" }),
        transactionHandler: (editor, tr) => { },
        focusHandler: (editor, event) => { },
        blurHandler: (editor, event) => { },
        onUploadStart: () => { },
        onUploadFinish: (result) => { },
        bubbleMenuElements: {},
        commentsContainerId: null,
        slashCommandContainerId: null,
        bubbleMenuShownHandler: (editor, instance) => { },
        bubbleMenuHiddenHandler: (editor, instance) => { },
        linkModalShownHandler: (editor, instance) => { },
        linkModalHiddenHandler: (editor, instance) => { },
        documentSyncedCallback: (state) => { },
        slashCommandContainerShown: (instance) => { },
        slashCommandContainerHidden: (instance) => { },
        onCommandTrigger: (item, props) => { },
        currentUser: null,
        collabConfig: {
            name: "", // unique document identifier
            appId: "", // collab app Id
            token: "", // auth token
        },
        onStreamEnd: () => { },
    };



    /**
     * Create a DocumentEditor instance.
     * @param {HTMLElement} element - The HTML element to initialize the editor in.
     * @param {object} [options=defaultOptions] - Options for the editor.
     * @param {string} [options.placeholderText=""] - Placeholder text.
     * @param {string} [options.initialContent=""] - Initial content of the editor.
     * @param {boolean} [options.editable=true] - Whether the editor is editable.
     * @param {boolean} [options.autofocus=false] - Whether the editor should autofocus.
     * @param {number|null} [options.characterLimit=null] - The character limit for the editor content.
     * @param {Function} [options.updateHandler=(editor) => {}] - Handler function for content updates.
     * @param {Function} [options.selectionHandler=(selectedText) => {}] - Handler function for text selection updates.
     * @param {Function} [options.createHandler=() => {}] - Handler function for editor creation.
     * @param {Function} [options.imageUploadHandler=(file) => Promise.resolve({ name: "", url: "" })] - Handler function for image uploads.
     * @param {Function} [options.transactionHandler=(editor, tr) => {}] - Handler function for transactions.
     * @param {Function} [options.focusHandler=(editor, event) => {}] - Handler function for focus events.
     * @param {Function} [options.blurHandler=(editor, event) => {}] - Handler function for blur events.
     * @param {Function} [options.onUploadStart=() => {}] - Handler function called at the start of an upload.
     * @param {Function} [options.onUploadFinish=(result) => {}] - Handler function called at the end of an upload.
     * @param {Function} [options.bubbleMenuShownHandler=(editor, instance) => {}] - Handler function called when the bubble menu is shown.
     * @param {Function} [options.bubbleMenuHiddenHandler=(editor, instance) => {}] - Handler function called when the bubble menu is hidden.
     * @param {Function} [options.linkModalShownHandler=(editor, instance) => {}] - Handler function called when the link modal is shown.
     * @param {Function} [options.linkModalHiddenHandler=(editor, instance) => {}] - Handler function called when the link modal is hidden.
     * @param {Function} [options.documentSyncedCallback=(state) => {}] - Called after the initial successful sync of the Y.js document.
     * @param {string|null} [options.currentUser=null] - The user identifier or name.
     * @param {object} [options.collabConfig={ name: "", appId: "", token: "" }] - Collaboration configurations.
     * @param {object} [options.bubbleMenuElements={}] - Custom bubble menu elements.
     * @param {string} [options.commentsContainerId=null] - ID of the comments container.
     * @param {string} [options.slashCommandContainerId=null] - ID of the slash commands container.
     * @param {Function} [options.slashCommandContainerShown=(instance) => {}] - Handler function called when the slash command container is shown.
     * @param {Function} [options.slashCommandContainerHidden=(instance) => {}] - Handler function called when the slash command container is hidden.
     * @param {Function} [options.onCommandTrigger=(item, props) => {}] - Handler function called when a slash command is triggered.
     * @param {Function} [options.onStreamEnd=() => {}] - Callback to handle actions upon streaming completion.
     */
    constructor(element, options = this.#defaultOptions) {
        this.#yDoc = new Y.Doc();

        this.element = element;
        this.#imageUploader = this.#creteImageUploader();

        const {
            placeholderText,
            initialContent,
            audioData,
            editable,
            autofocus,
            updateHandler,
            selectionHandler,
            createHandler,
            imageUploadHandler,
            transactionHandler,
            focusHandler,
            blurHandler,
            onUploadStart,
            onUploadFinish,
            characterLimit,
            bubbleMenuShownHandler,
            bubbleMenuHiddenHandler,
            linkModalShownHandler,
            linkModalHiddenHandler,
            documentSyncedCallback,
            currentUser,
            collabConfig,
            bubbleMenuElements,
            commentsContainerId,
            slashCommandContainerId,
            slashCommandContainerHidden,
            slashCommandContainerShown,
            onCommandTrigger,
        } = this.updateEditorOptions({ ...this.#defaultOptions, ...options });

        const LinkBubbleMenu = BubbleMenu.extend({
            name: "LinkBubbleMenu",
        });

        let isPlaying = false;
        let currentWordIndex = 0;
        let currentParagraphIndex = 0;
        const highlightDuration = 300;
        let highlightAnimationFrameId = null;
        let wordSelected = false;
        let selectedWordPlayTime = -1;

        const playBtn = document.querySelector('[data-play]');
        const pauseBtn = document.querySelector('[data-pause]');
        const stopBtn = document.querySelector('[data-stop]');

        const sound = new Howl({
            src: [audioData.audio_url],
        });

        playBtn.addEventListener('click', () => {
            if (!isPlaying) {
                if (selectedWordPlayTime > -1) {
                    sound.seek(selectedWordPlayTime);
                }
                sound.play();
            }
        });

        pauseBtn.addEventListener('click', () => {
            if (isPlaying) sound.pause();
        });

        stopBtn.addEventListener('click', () => {
            wordSelected = false;
            sound.stop();
        });

        function assignPlayTimes(wordSpans) {
            wordSpans.forEach((span, index) => {
                const playTime = wordTimings.start_times[index];
                span.addEventListener('click', () => {
                    wordSelected = true;
                    sound.stop();
                    isPlaying = false;
                    selectedWordPlayTime = playTime;
                    currentWordIndex = index;
                    editor.commands.setHighlightedWordIndex(index);
                });
            });
        }



        sound.on('play', () => {
            isPlaying = true;
            highlightAnimationFrameId = requestAnimationFrame(highlightWord);
        });

        sound.on('pause', () => {
            isPlaying = false;
            cancelAnimationFrame(highlightAnimationFrameId);
        });

        sound.on('stop', resetHighlighting);
        sound.on('end', resetHighlighting);

        function resetHighlighting() {
            if (!wordSelected) {
                setTimeout(() => {
                    isPlaying = false;
                    currentWordIndex = 0;
                    currentParagraphIndex = 0;
                    cancelAnimationFrame(highlightAnimationFrameId);
                    editor.commands.clearHighlightedWord();
                    editor.commands.setContent(initialContent);
                }, highlightDuration);
            }
        }

        const wordTimings = calculateWordTimestamps(
            audioData.normalized_alignment.characters,
            audioData.normalized_alignment.character_start_times_seconds
        );

        function calculateWordTimestamps(characters, startTimes) {
            let words = [];
            let wordStartTimes = [];
            let currentWord = '';
            let currentWordStartTime = null;

            characters.forEach((char, index) => {
                if (currentWordStartTime === null) {
                    currentWordStartTime = startTimes[index];
                }

                currentWord += char;

                if (char === ' ' || index === characters.length - 1) {
                    if (currentWord.trim() !== '') {
                        words.push(currentWord.trim());
                        wordStartTimes.push(currentWordStartTime);
                    }
                    currentWord = '';
                    currentWordStartTime = null;
                }
            });

            return {
                words: words,
                start_times: wordStartTimes,
            };
        }

        this.#bubbleMenuElements = bubbleMenuElements;
        this.#commentsContainerId = commentsContainerId;

        if (
            collabConfig &&
            collabConfig.name.trim() !== "" &&
            collabConfig.appId.trim() !== "" &&
            collabConfig.token.trim() !== ""
        ) {
            this.#tiptapProvider = new TiptapCollabProvider({
                ...collabConfig,
                document: this.#yDoc,
            });
        }

        this.#extensions = [
            StarterKit.configure({
                heading: { levels: this.#headingLevels },
                // history: { depth: 10, newGroupDelay: 500 },
                history: false,
                dropcursor: { color: "#0000ff55", width: 4 },
            }),
            WordWrap.configure({
                wordTimings: { start_times: wordTimings.start_times },
                sound: audioData,
            }),
            CustomHighlight.configure({
                highlightDuration: highlightDuration,
            }),
            Underline,
            Image.configure({
                allowBase64: true,
                uploadCallback: async (file) => {
                    if (typeof onUploadStart === "function") {
                        onUploadStart(file);
                    }
                    if (typeof imageUploadHandler === "function") {
                        const data = await imageUploadHandler(file);
                        if (typeof onUploadFinish === "function") {
                            onUploadFinish(data);
                        }
                        return data;
                    }
                },
            }),
            Link.configure({ autolink: true, openOnClick: false }),
            Youtube.configure({ controls: false }),
            TextAlign.configure({ types: ["heading", "paragraph"] }),
            CustomMarkHighlight.configure({ multicolor: true }),
            BubbleMenu.configure({
                element: this.#bubbleMenuElements["main"],
                shouldShow: ({ editor, view, state, oldState, from, to }) => {
                    if (!editor.isEditable || this.#showLinkModal === true) {
                        return false;
                    }

                    const text = editor.state.doc.textBetween(from, to, "");
                    return text.trim().length > 0 && !editor.isActive("link");
                },
                tippyOptions: {
                    placement: this.#currentMenuPos,
                    hideOnClick: false,
                    interactive: true,
                    appendTo: document.body,
                    onCreate: (instance) => {
                        this.#mainBubbleMenuTippyInstance = instance;
                    },
                    onShown: (instance) => {
                        if (typeof bubbleMenuShownHandler === "function") {
                            bubbleMenuShownHandler(this, instance);
                        }
                    },
                    onClickOutside: (instance, event) => {
                        instance.setProps({
                            placement: this.#defaultMenuPos,
                        });
                        instance.hide();
                    },
                    onHidden: (instance) => {
                        if (typeof bubbleMenuHiddenHandler === "function") {
                            bubbleMenuHiddenHandler(this, instance);
                        }
                    },
                },
            }),
            LinkBubbleMenu.configure({
                element: this.#bubbleMenuElements["link"],
                shouldShow: ({ editor, view, state, oldState, from, to }) => {
                    if (!editor.isEditable) return false;

                    const text = editor.state.doc.textBetween(from, to, "");
                    let showMenu = false;
                    // Check if there is at least one character after the cursor
                    const positionAfterCursor = to;
                    const characterAfterCursor =
                        positionAfterCursor < state.doc.content.size
                            ? state.doc.textBetween(
                                positionAfterCursor,
                                positionAfterCursor + 1,
                                ""
                            )
                            : "";
                    if (this.#showLinkModal === true) {
                        showMenu =
                            text.trim().length > 0 && this.#showLinkModal;
                    } else {
                        showMenu =
                            editor.isActive("link") &&
                            characterAfterCursor.trim().length;
                    }

                    return showMenu;
                },
                tippyOptions: {
                    placement: "bottom",
                    hideOnClick: false,
                    interactive: true,
                    appendTo: document.body,
                    onCreate: (instance) => {
                        this.#linkBubbleMenuTippyInstance = instance;
                    },
                    onShown: (instance) => {
                        if (typeof linkModalShownHandler === "function") {
                            linkModalShownHandler(this, instance);
                        }
                    },
                    onClickOutside: (instance, event) => {
                        this.#showLinkModal = false;
                        instance.hide();
                    },
                    onHidden: (instance) => {
                        if (typeof linkModalHiddenHandler === "function") {
                            linkModalHiddenHandler(this, instance);
                        }
                    },
                },
            }),
            CharacterCount.configure({ limit: characterLimit }),
            CommentExtension.configure({
                HTMLAttributes: { class: "has-comment" },
                onCommentActivated: (commentId) => {
                    this.#clearActiveComments();
                    this.focusActiveComment(commentId);
                },
            }),
            Placeholder.configure({
                placeholder: ({ node }) => {
                    if (node.type.name === "paragraph") {
                        return placeholderText;
                    }
                    return null;
                },
            }),
            ImagePlaceholder.configure({
                uploadCallback: async (file) => {
                    if (typeof onUploadStart === "function") {
                        onUploadStart(file);
                    }
                    if (typeof imageUploadHandler === "function") {
                        const data = await imageUploadHandler(file);
                        if (typeof onUploadFinish === "function") {
                            onUploadFinish(data);
                        }
                        return data;
                    }
                },
            }),
            Collaboration.configure({ document: this.#yDoc }),
            SlashCommand.configure({
                slashCommandContainerId,
                slashCommandContainerHidden,
                slashCommandContainerShown,
                onCommandTrigger,
            }),
            Animated,
            CustomText,
        ];

        if (this.#tiptapProvider !== null) {
            this.#extensions.push(
                CollaborationCursor.configure({
                    provider: this.#tiptapProvider,
                })
            );
            this.#isTCollabActive = true;
        }

        this.#ID =
            this.#documentElement.id === ""
                ? `document-editor-${uniqueString()}`
                : `document-editor-${this.#documentElement.id}`;

        this.#editor = new Editor({
            element: this.#documentElement,
            extensions: this.#extensions
            ,
            editorProps: {
                attributes: {
                    class: "document-editor",
                    id: this.#ID,
                },
            },
            // content: this.#contentValidated(initialContent),
            editable,
            autofocus,
            onCreate: ({ editor }) => {
                editor.commands.setWords(wordTimings.words);
                if (typeof createHandler === "function") {
                    createHandler();
                }
            },
            onUpdate: ({ editor }) => {
                if (typeof updateHandler === "function") {
                    updateHandler(this); // Instance of DocumentEditor
                }
            },
            onSelectionUpdate: ({ editor }) => {
                const { view, state } = editor;
                const { from, to } = view.state.selection;
                const text = state.doc.textBetween(from, to, "");
                this.#selectedText = text;

                if (typeof selectionHandler === "function") {
                    selectionHandler(text);
                }

                this.#selectionStart = from;
                this.#selectionEnd = to;

                this.#showLinkModal = false;
            },
            onTransaction: ({ editor, transaction }) => {
                if (typeof transactionHandler === "function") {
                    transactionHandler(this, transaction);
                }
            },
            onFocus: ({ editor, event }) => {
                if (typeof focusHandler === "function") {
                    focusHandler(this, event);
                }
            },
            onBlur: ({ editor, event }) => {
                if (typeof blurHandler === "function") {
                    blurHandler(this, event);
                }
            },
            // onDestroy() {},
        });

        const editor = this.#editor;

        function highlightWord() {
            if (!isPlaying) return;

            const currentTime = sound.seek();

            if (
                currentWordIndex < wordTimings.start_times.length &&
                currentTime >= wordTimings.start_times[currentWordIndex]
            ) {
                editor.commands.setHighlightedWordIndex(currentWordIndex);
                currentWordIndex++;
            }

            if (currentWordIndex < wordTimings.words.length) {
                highlightAnimationFrameId = requestAnimationFrame(highlightWord);
            } else {
                isPlaying = false;
            }
        }

        if (
            this.#editor &&
            this.#editorOptions &&
            this.#tiptapProvider !== null
        ) {
            const user = {
                name:
                    currentUser?.length > 0
                        ? currentUser
                        : getRandomElement(randomNames),
                color: getRandomElement(colors),
            };

            this.#editor.chain().focus().updateUser(user).run();
        }

        if (this.#tiptapProvider !== null) {
            this.#tiptapProvider.on("synced", (state) => {
                if (this.isEmpty()) {
                    this.setContent(initialContent);
                }

                if (typeof documentSyncedCallback === "function") {
                    documentSyncedCallback(state);
                }
            });
        }

        if (this.#tiptapProvider === null) {
            this.setContent(initialContent);
        }

        if (this.isEmpty()) {
            this.#editor.setOptions({ autofocus: true });
        }

        // Bind methods to instance
        this.setContent = this.setContent.bind(this);
        this.setImage = this.setImage.bind(this);
        this.setYoutubeVideo = this.setYoutubeVideo.bind(this);
        this.toggleHeading = this.toggleHeading.bind(this);
        this.toggleBold = this.toggleBold.bind(this);
        this.toggleItalic = this.toggleItalic.bind(this);
        this.toggleUnderline = this.toggleUnderline.bind(this);
        this.toggleBulletList = this.toggleBulletList.bind(this);
        this.toggleOrderedList = this.toggleOrderedList.bind(this);
        this.toggleBlockquote = this.toggleBlockquote.bind(this);
        this.undo = this.undo.bind(this);
        this.redo = this.redo.bind(this);
        this.copyContentToClipboard = this.copyContentToClipboard.bind(this);
        this.isActive = this.isActive.bind(this);
        this.getHTML = this.getHTML.bind(this);
        this.getJSON = this.getJSON.bind(this);
        this.getText = this.getText.bind(this);
        this.isEmpty = this.isEmpty.bind(this);
        this.canUndo = this.canUndo.bind(this);
        this.canRedo = this.canRedo.bind(this);
        this.setHighlight = this.setHighlight.bind(this);
        this.unsetHighlight = this.unsetHighlight.bind(this);
        this.replaceHighlightedText = this.replaceHighlightedText.bind(this);
        this.extractFirstSentence = this.extractFirstSentence.bind(this);
        this.clearContent = this.clearContent.bind(this);
        this.uploadImage = this.uploadImage.bind(this);
        this.focus = this.focus.bind(this);
        this.focusActiveComment = this.focusActiveComment.bind(this);
        this.insertImagePlaceholder = this.insertImagePlaceholder.bind(this);
        this.insertLink = this.insertLink.bind(this);
        this.setLink = this.setLink.bind(this);
        this.unsetLink = this.unsetLink.bind(this);
        this.getPreviousURL = this.getPreviousURL.bind(this);
        this.stream = this.stream.bind(this);

        // DOM Events
        document.addEventListener("keydown", (event) => {
            if (event.metaKey && (event.key === "=" || event.key === "+")) {
                event.preventDefault();
                this.#zoomInEditor();
            } else if (event.metaKey && event.key === "-") {
                event.preventDefault();
                this.#zoomOutEditor();
            } else if (event.metaKey && event.key === "0") {
                event.preventDefault();
                this.#resetZoom();
            }
        });

        document.addEventListener('DOMContentLoaded', () => {
            const wordSpans = this.#documentElement.querySelectorAll('.word');
            assignPlayTimes(wordSpans);
        });
    }

    /**
     * Set the HTML element for the editor.
     * @param {HTMLElement} value - The HTML element to set.
     * @throws {Error} - If the value is not an HTMLElement.
     */
    set element(value) {
        if (!(value instanceof HTMLElement)) {
            throw new Error(
                "Invalid HTML element. Expected an instance of HTMLElement."
            );
        }
        this.#documentElement = value;
    }

    /**
     * Set the content of the editor.
     * @param {string} content - The content to set.
     * @throws {Error} - If the content is not valid HTML or JSON.
     */
    setContent(content) {
        try {
            this.#editor.commands.setContent(this.#contentValidated(content));
        } catch (error) {
            console.error("Failed to set content:", error.message);
        }
    }

    /**
     * Set an image in the editor.
     * @param {string} url - The URL of the image.
     * @throws {Error} - If the URL is not valid.
     */
    setImage(options = { url: "", alt: "", title: "" }) {
        const { url, alt, title } = options;
        if (!isValidUrl(url)) {
            throw new Error("Invalid URL. Please provide a valid URL.");
        }
        this.#editor.chain().focus().setImage({ src: url, alt, title }).run();
        this.#editor.commands.createParagraphNear();
    }

    /**
     * Insert a placeholder node at the current cursor position.
     */
    insertImagePlaceholder() {
        this.#editor
            .chain()
            .focus()
            .insertContent({ type: ImagePlaceholder.name })
            .run();
        this.#editor.commands.createParagraphNear();
    }

    /**
     * Insert content below the current selection, moving it to a new line.
     * @param {Object} content - The content to insert.
     */
    insertContentBelowSelection(content) {
        const { state, dispatch } = this.#editor.view;
        const { from, to } = state.selection;

        // Move to the end of the current selection
        this.#editor.commands.setTextSelection({ from: to, to: to });

        // Create a new paragraph below the current selection
        this.#editor.commands.enter();

        // Insert the provided content on the new line
        this.#editor.commands.insertContent(content);
    }

    /**
     * Inserts content into the editor after checking for a preceding slash.
     *
     * @param {string} content - The content to be inserted.
     * @param {boolean} [insertOnNextLine=false] - Whether to insert the content on a new line.
     */
    insertContentAfterSlash(content, insertOnNextLine = false) {
        const { state, view } = this.#editor;
        const { selection } = state;
        const { from } = selection;

        // Check if the character before the cursor is a slash
        const slashPos = from - 1;
        const charBefore = state.doc.textBetween(slashPos, from);

        if (charBefore === "/") {
            // Delete the slash character
            let tr = state.tr.delete(slashPos, from);
            view.dispatch(tr);

            // Prepare the content to be inserted
            let insertContent = content;
            if (insertOnNextLine) {
                insertContent = `<p>${content}</p>`;
            }

            // Use the Tiptap editor's `insertContent` method
            this.#editor
                .chain()
                .focus()
                .insertContent(insertContent, {
                    parseOptions: { preserveWhitespace: "full" },
                })
                .run();
        }
    }

    /**
     * Set a YouTube video in the editor.
     * @param {string} url - The URL of the YouTube video.
     * @throws {Error} - If the URL is not valid.
     */
    setYoutubeVideo(url = "") {
        if (!isValidUrl(url)) {
            throw new Error("Invalid URL. Please provide a valid URL.");
        }
        this.#editor.commands.setYoutubeVideo({
            src: url,
        });
    }

    /**
     * Applies highlight formatting to the selected text with the specified color.
     *
     * @param {string} color - The color to apply as the highlight. Can be any valid CSS color value (e.g., 'red', '#ff0000', 'rgb(255,0,0)').
     */
    setHighlight(color) {
        // this.#editor.chain().focus().setMark(CustomMarkHighlight.name).run();
        this.#editor.commands.setMark(CustomMarkHighlight.name, {
            color,
        });
    }

    /**
     * Selects all text in the editor and applies highlight formatting with the specified color.
     *
     * @param {string} color - The color to use for highlighting.
     */
    selectAllAndHighlight(color) {
        this.#editor.commands.selectAll();
        this.setHighlight(color);
    }

    /**
     * Set the text selection in the editor.
     * @param {number} start - The start position of the selection.
     * @param {number} end - The end position of the selection.
     */
    #setTextSelection(start, end) {
        this.#editor.commands.setTextSelection({ from: start, to: end });
    }

    /**
     * Set the position of the bubble menu.
     * @param {string} position - The position of the bubble menu ('top' or 'bottom').
     * @throws {Error} - If the position is not 'top' or 'bottom'.
     */
    setMenuPos(position) {
        const placements = ["top", "bottom"];
        if (!placements.includes(position)) {
            throw new Error(
                `Invalid placement. Expected values ${placements} `
            );
        }
        this.#currentMenuPos = position;
        this.#mainBubbleMenuTippyInstance.setProps({
            placement: this.#currentMenuPos,
        });
        this.#mainBubbleMenuTippyInstance.show();
    }

    /**
     * Set a comment with the given comment ID on the selected text.
     * @param {string} commentId - The ID of the comment to set.
     */
    setComment(commentId) {
        this.#editor.commands.setComment(commentId);
    }

    /**
     * Unset a comment with the given comment ID from the selected text.
     * @param {string} commentId - The ID of the comment to unset.
     */
    unsetComment(commentId) {
        this.#editor.commands.unsetComment(commentId);
    }

    /**
     * Displays the link popover and sets the highlight for the current selection.
     */
    insertLink() {
        this.hideLinkPopover();

        this.showLinkPopover();

        this.setHighlight();
    }

    /**
     * Displays the link popover.
     */
    showLinkPopover() {
        this.#showLinkModal = true;
        this.#linkBubbleMenuTippyInstance?.show();
    }

    /**
     * Hides the link popover.
     */
    hideLinkPopover() {
        this.#linkBubbleMenuTippyInstance?.hide();
        this.#showLinkModal = false;
    }

    /**
     * Sets the link URL for the selected text.
     * If the URL is an empty string, it unsets the link.
     * @param {string} url - The URL to set for the link.
     */
    setLink(url) {
        if (!url) return;

        if (url === "") {
            this.#editor
                .chain()
                .focus()
                .extendMarkRange("link")
                .unsetLink()
                .run();
            return;
        }

        this.#editor
            .chain()
            .focus()
            .extendMarkRange("link")
            .setLink({ href: url, target: "_blank" })
            .run();
    }

    /**
     * Streams content from the given URL and inserts it into the editor with a typewriter effect.
     *
     * @param {string} url - The URL to stream content from.
     */
    stream(url) {
        this.#editor.chain().focus().run();

        let isTyping = false;
        let queue = [];

        // Function to process the queue of paragraphs
        const processQueue = () => {
            if (queue.length > 0 && !isTyping) {
                const paragraph = queue.shift(); // Get the next paragraph
                if (paragraph.trim() === "") {
                    // Skip empty paragraphs
                    processQueue();
                    return;
                }

                isTyping = true;

                // Insert only if the paragraph has content
                this.#editor.commands.insertContent({
                    type: Animated.name,
                });

                // Use typewriter effect to insert the paragraph text
                typewriterEffect(this.#editor, paragraph, 30, () => {
                    isTyping = false;
                    processQueue(); // Process the next paragraph once this one is done

                    if (queue.length === 0) {
                        setTimeout(() => {
                            this.#finishAnimationCleanup();

                            if (
                                typeof this.#editorOptions.onStreamEnd ===
                                "function"
                            ) {
                                setTimeout(() => {
                                    this.#editorOptions.onStreamEnd();
                                }, 2000);
                            }
                        }, 2000);
                    }
                });
            }
        };

        const eventSource = new EventSource(url);
        let previousText = ""; // Variable to store the last inserted content

        eventSource.addEventListener("message", (event) => {
            const newText = event.data;

            // Only insert the new part of the text (difference from the previous one)
            const difference = newText.replace(previousText, "");

            if (difference) {
                queue.push(difference); // Add new paragraph to the queue
                processQueue(); // Start processing the queue
            }

            // Update the previousText to the newText for comparison in the next iteration
            previousText = newText;
        });

        eventSource.addEventListener("error", (event) => {
            eventSource.close(); // Close the stream on error
        });
    }

    /**
     * Cleans up and replaces `Animated` nodes in the editor with `customText` nodes.
     */
    #finishAnimationCleanup() {
        const { state, view } = this.#editor;

        // Ensure the editor view and document are available
        if (!view || !state.doc) {
            return;
        }

        const { doc } = state;
        const transaction = state.tr; // Create a transaction to collect changes

        // Collect positions and content of Animated nodes
        const positionsToReplace = [];
        doc.descendants((node, pos) => {
            if (node.type.name === Animated.name) {
                // Make sure to match the node type name correctly
                positionsToReplace.push({ node, pos });
            }
        });

        // Process replacements from the end to the beginning
        positionsToReplace.reverse().forEach(({ node, pos }) => {
            const textContent = node.textContent;

            // Ensure the node has content and is within valid range
            if (textContent && pos < doc.content.size) {
                const inlineNode = view.state.schema.nodes.customText.create(
                    {},
                    [view.state.schema.text(textContent)]
                );

                // Replace Animated node with customText node
                transaction.replaceWith(pos, pos + node.nodeSize, inlineNode);
            }
        });

        // Dispatch the transaction to apply the changes
        if (transaction.docChanged) {
            view.dispatch(transaction);
        }
    }

    /**
     * Unsets the link for the selected text.
     */
    unsetLink() {
        this.#editor.chain().focus().unsetLink().run();
    }

    /**
     * Retrieves the href attribute of the previous link.
     * @returns {string} The href of the previous link.
     */
    getPreviousURL() {
        return this.#editor.getAttributes("link").href;
    }

    /**
     * Focuses the editor.
     */
    focus() {
        this.#editor.commands.focus();
    }

    /**
     * Focus and scroll to the active comment element with the given comment ID.
     * @param {string} commentId - The ID of the comment to focus on.
     */
    focusActiveComment(commentId) {
        const commentsContainerEl = document.querySelector(
            `#${this.#commentsContainerId}`
        );

        if (!commentsContainerEl) return;

        const activeCommentEl = commentsContainerEl.querySelector(
            `#${commentId}`
        );

        if (!activeCommentEl) return;

        activeCommentEl.classList.add("active");

        activeCommentEl.scrollIntoView({
            behavior: "smooth",
            block: "center",
            inline: "center",
        });
    }

    /**
     * Clear all active comment elements.
     */
    #clearActiveComments() {
        // Select and remove the 'active' class from all active comment elements
        document.querySelectorAll(".document-comment.active")?.forEach((el) => {
            el.classList.remove("active");
        });
    }

    /**
     * Get the currently selected text.
     * @returns {string} - The currently selected text.
     */
    get selectedText() {
        return this.#selectedText;
    }

    /**
     * Get the word count of the editor content.
     * @returns {number} - The word count.
     */
    get wordCount() {
        return this.#editor.storage.characterCount.words();
    }

    /**
     * Get the character count of the editor content.
     * @returns {number} - The character count.
     */
    get characterCount() {
        return this.#editor.storage.characterCount.characters();
    }

    /**
     * Check if Tiptap collaboration is enabled.
     * @returns {boolean} - True if Tiptap collaboration is enabled, false otherwise.
     */
    get isTCollabActive() {
        return this.#isTCollabActive;
    }

    /**
     * Unset highlight formatting for the selected text.
     */
    unsetHighlight() {
        if (this.#selectionStart && this.#selectionEnd) {
            this.#setTextSelection(this.#selectionStart, this.#selectionEnd);
        }
        // this.#editor.chain().focus().unsetMark(CustomMarkHighlight.name).run();
        this.#editor.commands.unsetMark(CustomMarkHighlight.name);
    }

    /**
     * Unset all highlight formatting from the entire document.
     */
    unsetHighlightAll() {
        const { doc } = this.#editor.state;
        const tr = this.#editor.state.tr;

        doc.descendants((node, pos) => {
            if (node.isText) {
                node.marks.forEach((mark) => {
                    if (mark.type.name === CustomMarkHighlight.name) {
                        const from = pos;
                        const to = pos + node.nodeSize;
                        tr.removeMark(from, to, mark);
                    }
                });
            }
        });

        this.#editor.view.dispatch(tr);
    }

    /**
     * Update the editor options.
     *
     * @param {object} options - Options to update.
     * @returns {object} - The updated editor options.
     */
    updateEditorOptions(options = {}) {
        this.#editorOptions = options;
        return this.#editorOptions;
    }

    /**
     * Toggle heading formatting for the selected text.
     * @param {number} level - The heading level to toggle.
     */
    toggleHeading(level = 0) {
        if (
            typeof level !== "number" ||
            level <= 0 ||
            level > this.#headingLevels.length
        ) {
            throw new Error(
                "Invalid heading level. Expected a positive integer within the range of available heading levels."
            );
        }
        this.#editor.chain().focus().toggleHeading({ level: level }).run();
    }

    /**
     * Toggles the selected block to a paragraph node.
     * If the current block is not a paragraph, it converts it to a paragraph.
     * If it is already a paragraph, it will switch to the default node type.
     */
    toggleParagraph() {
        this.#editor.commands.toggleNode("paragraph", "paragraph");
    }

    /**
     * Toggle bold formatting for the selected text.
     */
    toggleBold() {
        this.#editor.chain().focus().toggleBold().run();
    }

    /**
     * Toggle italic formatting for the selected text.
     */
    toggleItalic() {
        this.#editor.chain().focus().toggleItalic().run();
    }

    /**
     * Toggle underline formatting for the selected text.
     */
    toggleUnderline() {
        this.#editor.chain().focus().toggleUnderline().run();
    }

    /**
     * Toggle bullet list formatting for the selected text.
     */
    toggleBulletList() {
        this.#editor.chain().focus().toggleBulletList().run();
    }

    /**
     * Toggle ordered list formatting for the selected text.
     */
    toggleOrderedList() {
        this.#editor.chain().focus().toggleOrderedList().run();
    }
    /**
     * Toggle blockquote for the selected text.
     */
    toggleBlockquote() {
        this.#editor.chain().focus().toggleBlockquote().run();
    }

    /**
     * Undo the last action.
     */
    undo() {
        if (this.canUndo()) {
            this.#editor.chain().focus().undo().run();
        }
    }

    /**
     * Redo the last undone action.
     */
    redo() {
        if (this.canRedo()) {
            this.#editor.chain().focus().redo().run();
        }
    }

    /**
     * Copy the editor content to the clipboard.
     */
    async copyContentToClipboard() {
        try {
            const text = this.getText();
            await navigator.clipboard.writeText(text);
        } catch (error) {
            console.error(
                "Failed to copy content to clipboard:",
                error.message
            );
        }
    }

    /**
     * Replaces the currently highlighted text in the editor with the given new text.
     * @param {string} newText - The text to replace the highlighted text with.
     * @throws {Error} Throws an error if newText is not a non-empty string.
     * @throws {Error} Throws an error if no text is currently selected in the editor.
     */
    replaceHighlightedText(newText = "") {
        if (typeof newText !== "string" || newText.trim().length === 0) {
            throw new Error("Invalid text. Expected a non-empty string.");
        }
        const { from, to } = this.#editor.state.selection;
        if (from === to) {
            throw new Error("No text is selected.");
        }
        this.#editor.commands.setTextSelection(from, to);
        this.#editor.commands.deleteRange({ from, to });
        this.#editor.commands.insertContent(newText, {
            parseOptions: { preserveWhitespace: true },
        });
    }

    /**
     * Checks if the specified extension is currently active in the editor.
     * @param {string} extensionName - The name of the extension to check.
     * @param {Object} attributes - Additional attributes to check for the extension.
     * @throws {Error} Throws an error if extensionName is not a non-empty string.
     * @returns {boolean} Returns true if the specified extension is active, otherwise false.
     */
    isActive(extensionName = "", attributes = {}) {
        if (
            typeof extensionName !== "string" ||
            extensionName.trim().length === 0
        ) {
            throw new Error(
                "Invalid extension name. Expected a non-empty string."
            );
        }
        return this.#editor.isActive(extensionName, attributes);
    }

    /**
     * Extract the first sentence from the editor content.
     * @returns {string} - The first sentence.
     */
    extractFirstSentence() {
        const firstNode = this.#editor.$doc.children.find(
            (nodePos) =>
                (nodePos.node.type.name === "heading" &&
                    nodePos.node.textContent.trim().length !== 0) ||
                (nodePos.node.type.name === "paragraph" &&
                    nodePos.node.textContent.trim().length !== 0)
        );

        if (!firstNode) return null;

        return firstNode.textContent.split(".")[0];
    }

    /**
     * Get the HTML content of the editor.
     * @returns {string} - The HTML content.
     */
    getHTML() {
        return this.#editor.getHTML();
    }

    /**
     * Get the JSON content of the editor.
     * @returns {object} - The JSON content.
     */
    getJSON() {
        return this.#editor.getJSON();
    }

    /**
     * Get the plain text content of the editor.
     * @returns {string} - The plain text content.
     */
    getText() {
        return this.#editor.getText();
    }

    /**
     * Get the ID of the editor.
     * @returns {string} - The ID of the editor.
     */
    get ID() {
        return this.#ID;
    }

    /**
     * Check if the editor is empty.
     * @returns {boolean} - True if the editor is empty, false otherwise.
     */
    isEmpty() {
        return this.#editor.isEmpty;
    }

    /**
     * Check if the editor is editable.
     * @returns {boolean} - True if the editor is editable, false otherwise.
     */
    isEditable() {
        return this.#editor.isEditable;
    }

    /**
     * Check if there are actions to undo.
     * @returns {boolean} - True if there are actions to undo, false otherwise.
     */

    canUndo() {
        return this.#editor.can().undo();

    }

    /**
     * Check if there are actions to redo.
     * @returns {boolean} - True if there are actions to redo, false otherwise.
     */
    canRedo() {
        return this.#editor.can().redo();
    }

    /**
     * Clear the editor content.
     */
    clearContent() {
        this.#editor.chain().focus().clearContent().run();
    }

    /**
     * Open a file input dialog to upload an image.
     * @param {Function} callback - Callback function to handle the selected file.
     */
    uploadImage(callback = () => { }) {
        this.#imageUploader.onchange = (e) => {
            const file = e.target.files[0];
            if (typeof callback === "function") {
                callback(file);
            }
            this.#imageUploader.value = "";
        };
        this.#imageUploader.click();
    }

    /**
     * Increases the zoom level of the editor content by 10%, up to a maximum of 200%.
     */
    #zoomInEditor() {
        if (this.#zoomLevel * 100 < 200) {
            this.#zoomLevel += 0.1;
        }
        this.#applyZoom();
    }

    /**
     * Decreases the zoom level of the editor content by 10%, down to a minimum of 50%.
     */
    #zoomOutEditor() {
        if (this.#zoomLevel * 100 > 50) {
            this.#zoomLevel -= 0.1;
        }
        this.#applyZoom();
    }

    /**
     * Resets the zoom level of the editor content to the default value of 100%.
     */
    #resetZoom() {
        this.#zoomLevel = 1;
        this.#applyZoom();
    }

    /**
     * Applies the current zoom level to the editor content by scaling the content.
     */
    #applyZoom() {
        const editorContent = this.#documentElement;
        editorContent.style.transform = `scale(${this.#zoomLevel})`;
        editorContent.style.transformOrigin = "top center";
    }

    /**
     * Validates and parses the provided content if it is JSON, or returns the content as-is if it is HTML.
     * @param {string} content - The content to be validated.
     * @returns {Object|string|null} The validated and parsed content if it's JSON, the content as-is if it's HTML, or null if the content is neither valid JSON nor HTML.
     */
    #contentValidated(content) {
        if (!content || String(content).trim().length === 0) return null;
        return validateJSON(content)
            ? JSON.parse(content)
            : validateHTML(content)
                ? content
                : null;
    }

    /**
     * Create an input element for image uploading.
     * @returns {HTMLInputElement} - The created input element.
     */
    #creteImageUploader() {
        const input = document.createElement("input");
        input.id = uniqueString();
        input.type = "file";
        input.accept = "image/*";
        input.hidden = true;
        input.setAttribute("style", "visibility:hidden;");
        document.body.appendChild(input);
        return input;
    }

    /**
     * Destroys the editor.
     */
    destroy() {
        if (this.#editor) {
            this.#editor.destroy();
            this.#editor = null;
        }

        if (this.#yDoc) {
            this.#yDoc.destroy();
            this.#yDoc = null;
        }

        if (this.#tiptapProvider) {
            this.#tiptapProvider.destroy();
            this.#tiptapProvider = null;
        }
    }
}
